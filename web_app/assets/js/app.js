!function(){"use strict";angular.module("app",["app.core","app.gui","app.auth","app.nav","app.dashboard","app.config","app.warnings","app.admin"])}(),function(){"use strict";angular.module("app.admin",["app.core","app.gui"])}(),function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.config",["app.core","app.gui"])}(),function(){"use strict";angular.module("app.dashboard",["app.core","app.gui","chart.js","ui.indeterminate"])}(),function(){"use strict";angular.module("app.core",["ui.router"])}(),function(){"use strict";angular.module("app.gui",["mgcrea.ngStrap","mgcrea.ngStrap.helpers.dimensions","mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.helpers.parseOptions","mgcrea.ngStrap.tooltip","mgcrea.ngStrap.datepicker","mgcrea.ngStrap.timepicker","mgcrea.ngStrap.button","mgcrea.ngStrap.select"])}(),function(){"use strict";angular.module("app.nav",["app.core","app.auth"])}(),function(){"use strict";angular.module("app.warnings",["app.core","app.gui"])}(),function(){"use strict";angular.module("app").constant("moment",moment).constant("google",google)}(),function(){"use strict";angular.module("app").constant("SERVER_ADDRESS","http://teamneptune.co")}(),function(){"use strict";function e(e,n){function t(){r()}function r(){n.getUsers().then(function(e){f.users=e.data.users,o()},function(n){e.error(n)})}function o(){f.users.forEach(function(e){e.lastLogin.Valid?e.lastLogin.text=e.lastLogin.Time:e.lastLogin.text="Never"})}function a(e){f.editUserId=e.id,f.editUser=e}function i(){-2!=f.editUserId?n.updateUser(f.editUser).then(function(e){r()},function(n){e.error(n)}):(n.addUser(f.editUser).then(function(e){r()},function(n){e.error(n)}),f.users.splice(f.users.length-1,1)),f.editUserId=-1}function s(){-2==f.editUserId&&f.users.splice(f.users.length-1,1),f.editUserId=-1}function u(t){n.deleteUser(t.id).then(function(e){r()},function(n){e.error(n)})}function c(e){return(-1==f.editUserId||f.editUserId==e.id)&&-2!=e.id}function d(){var e={id:-2};f.users.push(e),a(e)}function p(){if(""!=f.newBuoyName){var t=l();n.addBuoy(f.newBuoyName,t).then(function(e){alert("Buoy created successfully")},function(n){e.error(n)}),f.newBuoyName=""}}function l(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var n=16*Math.random()|0,t="x"==e?n:3&n|8;return t.toString(16)})}var f=this;f.users=[],f.editUserId=-1,f.newBuoyName="",f.roles=["user","power_user","system_admin"],f.startEditingUser=a,f.finishEditingUser=i,f.deleteUser=u,f.cancelEditingUser=s,f.startAddingUser=d,f.showDeleteButton=c,f.addBuoy=p,t()}angular.module("app.admin").controller("AdminController",e),e.$inject=["$log","server"]}(),function(){"use strict";function e(e){e.configureStates(n())}function n(){return[{state:"admin",config:{url:"/admin",controller:"AdminController",controllerAs:"vm",templateUrl:"/app/admin/admin.html",data:{access:"system_admin"}}}]}angular.module("app.admin").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,n,t){function r(e,r,o,a,i){t.checkUser(r.data.access)||(e.preventDefault(),"^"===a.url&&(t.loggedIn()?n.go("dashboard"):n.go("login")))}e.$on("$stateChangeStart",r)}angular.module("app.auth").run(e),e.$inject=["$rootScope","$state","auth"]}(),function(){"use strict";function e(e,n,t,r,o){function a(){c()}function i(){r.login(d.email,d.password).then(function(e){t.loggedIn()&&(e.data.lastLogin.Valid?n.go("dashboard"):d.firstLogin=!0,c())},function(e){alert("Invalid email or password")})}function s(){""!=d.newPassword&&d.newPassword==d.confirmPassword?(r.changePassword(d.newPassword),d.newPassword=d.confirmPassword="",d.firstLogin=!1):alert("Invalid password")}function u(){r.forgotPassword(d.email)}function c(){d.email="andrew@dyergroup.com.au",d.password="D9mEpnvx"}var d=this;d.firstLogin=!1,d.login=i,d.changePassword=s,d.forgotPassword=u,a()}angular.module("app.auth").controller("AuthController",e),e.$inject=["$rootScope","$state","auth","server","routerHelper"]}(),function(){"use strict";function e(e){e.configureStates(n())}function n(){return[{state:"login",config:{url:"/login",templateUrl:"/app/auth/login.html",data:{access:"unauthed"}}}]}angular.module("app.auth").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,n){function t(){e.localStorage.removeItem("token")}function r(){var e=a();if(e){var t=c(e);return n().unix()<=t.exp}return!1}function o(n){e.localStorage.token=n}function a(){return e.localStorage.token}function i(){return c(a()).sub}function s(){var e=a();return null==e?"unauthed":c(e).role}function u(e){var n={unauthed:0,authed:1,user:1,power_user:2,system_admin:3,andrew:99999};if("any"==e)return!0;if("unauthed"==e){if(r())return!1}else if(!r())return!1;return n[s()]>=n[e]}function c(n){var t=n.split(".")[1],r=t.replace("-","+").replace("_","/");return JSON.parse(e.atob(r))}return{logout:t,loggedIn:r,getToken:a,saveToken:o,currentUser:i,checkUser:u}}angular.module("app.auth").factory("auth",e),e.$inject=["$window","moment"]}(),function(){"use strict";function e(e){function n(e){return e}function t(n){return n.data.token&&e.saveToken(n.data.token),n}return{request:n,response:t}}angular.module("app.auth").factory("authInterceptor",e),e.$inject=["auth"]}(),function(){"use strict";function e(e,n){function t(){r(),o(),a(),s(),R()}function r(){n.getBuoyGroups().then(function(e){L.buoyGroups=e.data.buoyGroups,c()},function(n){e.error(n)})}function o(){n.getBuoyInstances().then(function(e){L.buoyInstances=e.data.buoyInstances,c()},function(n){e.error(n)})}function a(){n.getCommandTypes().then(function(e){L.commandTypes=e.data.commandTypes,i()},function(n){e.error(n)})}function i(){n.getBuoyCommands().then(function(e){L.commands=e.data.commands,E()},function(n){e.error(n)})}function s(){n.getWarningTriggers().then(function(e){L.warningTriggers=e.data.warningTriggers,u()},function(n){e.error(n)})}function u(){n.getSensorTypes().then(function(e){L.sensorTypes=e.data.sensorTypes,d()},function(n){e.error(n)})}function c(){L.buoyInstances.forEach(function(e){h(e)})}function d(){L.warningTriggers.forEach(function(e){for(var n=0;n<L.buoyInstances.length;n++){var t=L.buoyInstances[n];if(t.id==e.buoyInstanceId){e.buoyName=t.name;break}}for(var n=0;n<L.sensorTypes.length;n++){var r=L.sensorTypes[n];if(r.id==e.sensorTypeId){e.sensorName=r.name;break}}})}function p(){return"instance"==L.selected.type?!0:"group"==L.selected.type&&L.groupBuoys.length>0?!0:"all"==L.selected.type&&L.buoyInstances.length>0?!0:!1}function l(){L.groupBuoys=[],L.buoyInstances.forEach(function(e){e.buoyGroupId==L.selected.obj.id&&L.groupBuoys.push(e)})}function f(){g(),L.selected.type="all"}function g(){L.editName.on=!1,L.editGroup.on=!1,L.newCommand=!1,L.newTrigger=!1}function m(e){g(),L.selected.type="group",L.selected.obj=e,l()}function y(e){g(),L.selected.type="instance",L.selected.obj=e,l()}function h(e){L.buoyGroups.forEach(function(n){return n.id==e.buoyGroupId?void(e.buoyGroupName=n.name):void 0})}function b(){L.editName.on=!0}function v(){L.editName.on=!1,"group"==L.selected.type?n.updateBuoyGroupName(L.selected.obj.id,L.selected.obj.name).then(function(e){r()},function(n){e.error(n)}):"instance"==L.selected.type&&n.updateBuoyInstanceName(L.selected.obj.id,L.selected.obj.name,L.selected.obj.buoyGroupId).then(function(e){o()},function(n){e.error(n)})}function I(){L.editName.on=!1}function w(){L.editGroup.on=!0,L.editGroup.buoyGroupId=L.selected.obj.buoyGroupId}function x(){L.editGroup.on=!1,L.selected.obj.buoyGroupId=L.editGroup.buoyGroupId,h(L.selected.obj),n.updateBuoyInstanceGroup(L.selected.obj.buoyId,L.editGroup.buoyGroupId,L.editGroup.name).then(function(e){o()},function(n){e.error(n)})}function T(){L.editGroup.on=!1}function B(){return L.editName.on?!0:L.editGroup.on?!0:L.newCommand?!0:L.newTrigger?!0:!1}function S(){L.selected.type="newGroup",L.selected.obj=null}function N(){n.newBuoyGroup(L.editName.value).then(function(e){L.selected.type="all",r()},function(n){e.error(n)})}function E(){L.commands.forEach(function(e){for(var n=0;n<L.buoyInstances.length;n++){var t=L.buoyInstances[n];if(e.buoyId==t.buoyId){e.buoyName=t.name,""==e.buoyName&&(e.buoyName="(no name)");break}}for(var n=0;n<L.commandTypes.length;n++)if(e.commandTypeId==L.commandTypes[n].id){e.commandName=L.commandTypes[n].name;break}})}function $(){if(-1!=L.command.id&&""!=L.command.value){L.newCommand=!1;var e=[];"instance"==L.selected.type?e.push(L.selected.obj.buoyId):"group"==L.selected.type?L.buoyInstances.forEach(function(n){n.buoyGroupId==L.selected.obj.id&&e.push(n.buoyId)}):"all"==L.selected.type&&L.buoyInstances.forEach(function(n){e.push(n.buoyId)}),k(e),G()}}function G(){L.command.id=-1,L.command.value=""}function j(){L.newCommand=!1,G()}function k(t){n.sendBuoyCommand(L.command,t).then(function(e){i()},function(n){e.error(n)})}function C(e){}function U(){if(-1!=L.trigger.sensorTypeId&&""!=L.trigger.value){L.newTrigger=!1;var e=[];"instance"==L.selected.type?e.push(L.selected.obj.id):"group"==L.selected.type?L.buoyInstances.forEach(function(n){n.buoyGroupId==L.selected.obj.id&&e.push(n.id)}):"all"==L.selected.type&&L.buoyInstances.forEach(function(n){e.push(n.id)}),O(e),R()}}function O(t){n.addWarningTriggers(L.trigger,t).then(function(e){s()},function(n){e.error(n)})}function R(){L.trigger={sensorTypeId:-1,operator:"<",value:"",message:""}}function M(){L.newTrigger=!1,R()}function _(e){return 0!=e.id?!0:!1}function A(e){return"all"==L.selected.type?!0:"instance"==L.selected.type?P(e):"group"==L.selected.type?D(e):!1}function P(e){return e.buoyId==L.selected.obj.buoyId?!0:!1}function D(e){for(var n=0;n<L.buoyInstances.length;n++){var t=L.buoyInstances[n];if(t.buoyGroupId==L.selected.obj.id&&e.buoyId==t.buoyId)return!0}return!1}var L=this;L.buoyGroups=[],L.buoyInstances=[],L.groupBuoys=[],L.commands=[],L.commandTypes=[],L.sensorTypes=[],L.warningTriggers=[],L.command={id:-1,value:""},L.selected={type:"none",obj:null},L.editName={},L.editName.on=!1,L.editGroup={},L.editGroup.on=!1,L.newCommand=!1,L.newTrigger=!1,L.operators=["<",">","="],L.trigger={},L.selectAll=f,L.selectBuoyGroup=m,L.selectBuoyInstance=y,L.startEditingName=b,L.finishEditingName=v,L.startEditingBuoyGroup=w,L.finishEditingBuoyGroup=x,L.selectNewBuoyGroup=S,L.saveNewBuoyGroup=N,L.buoyGroupFilter=_,L.commandFilter=A,L.sendCommand=$,L.deleteCommand=C,L.showBuoyConfig=p,L.addTrigger=U,L.cancelNewCommand=j,L.cancelNewTrigger=M,L.editing=B,L.cancelEditName=I,L.cancelEditGroup=T,t()}angular.module("app.config").controller("ConfigController",e),e.$inject=["$log","server"]}(),function(){"use strict";function e(e){e.configureStates(n())}function n(){return[{state:"config",config:{url:"/config",controller:"ConfigController",controllerAs:"vm",templateUrl:"/app/config/config.html",data:{access:"power_user"}}}]}angular.module("app.config").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,n,t,r,o){function a(){t.queryReadings().then(function(){g.buoys=t.buoys(),g.times=t.times(),t.updateFilters(),r.updateReadings(),g.readings=t.readings()}),t.querySensors().then(function(){g.sensors=t.sensors()}),n(function(){t.chart()},1e3)}function i(e){e.collapsed=!e.collapsed}function s(e){e.buoyInstances.forEach(function(n){n.enabled=e.enabled}),c()}function u(e,n){var t=!0,r=!0;e.buoyInstances.forEach(function(e){e.enabled?r=!1:t=!1}),r?e.enabled=!1:e.enabled=!0,r||t?e.indeterminate=!1:e.indeterminate=!0,c()}function c(){t.updateBuoys(),r.updateReadings()}function d(){if(p()){var e=m+" "+y;"range"==g.times.type?(g.times.range.from=o(g.times.inputs.range.from.date+" "+g.times.inputs.range.from.time,e),g.times.range.to=o(g.times.inputs.range.to.date+" "+g.times.inputs.range.to.time,e)):"point"==g.times.type&&(g.times.point=o(g.times.inputs.point.date+" "+g.times.inputs.point.time,e)),t.updateTimes().then(function(){r.updateReadings()})}}function p(){if("since"==g.times.type&&g.times.inputs.since.value)return!0;if("range"==g.times.type){var e=g.times.inputs.range.from.date,n=g.times.inputs.range.from.time,t=g.times.inputs.range.to.date,r=g.times.inputs.range.to.time;if(e&&n&&t&&r)return!0}return"point"==g.times.type&&g.times.inputs.point.date?!0:!1}function l(){t.updateSensors(),r.updateReadings()}function f(){t.exportData()}var g=this,m="D/M/YY",y="h:mm A";g.buoys=t.buoys(),g.times=t.times(),g.sensors=t.sensors(),g.readings=t.readings(),g.updateBuoysFilter=c,g.updateTimesFilter=d,g.updateSensorsFilter=l,g.toggleBuoyGroup=i,g.selectBuoyGroup=s,g.selectBuoyInstance=u,g.exportData=f,g.setupReadings=t.setupReadings,g.chart=t.chart(),a(),e.ready(function(){r.initialiseMap()})}angular.module("app.dashboard").controller("DashboardController",e),e.$inject=["$document","$interval","dashboard","map","moment"]}(),function(){"use strict";function e(e){var t="/dashboard";e.configureStates(n(),t)}function n(){return[{state:"dashboard",config:{url:"/dashboard",controller:"DashboardController",controllerAs:"vm",templateUrl:"/app/dashboard/dashboard.html",data:{access:"authed"}}}]}angular.module("app.dashboard").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,n,t){function r(r,o){r||(r=t().subtract(k.times.inputs.since.value,k.times.inputs.since.quantifier).unix(),o=t().unix());var a=n.getReadings(r,o);return a.then(function(e){G=e.data.buoyGroups,d()},function(n){e.error(n)}),a}function o(){var t=n.getSensorTypes();return t.then(function(e){v(e.data.sensorTypes)},function(n){e.error(n)}),t}function a(){return C}function i(){C.series=[],C.labels=[],C.data=[[null]]}function s(){for(var e=[],n=p(),r=0;r<n.length;r++)for(var o=0;o<n[r].buoyInstances.length;o++){var a={};a.name=n[r].buoyInstances[o].name;for(var i=[],s=0;s<n[r].buoyInstances[o].readings.length;s++)for(var u=0;u<n[r].buoyInstances[o].readings[s].sensorReadings.length;u++)if(1==n[r].buoyInstances[o].readings[s].sensorReadings[u].sensorTypeId){var c=n[r].buoyInstances[o].readings[s].timestamp,d=t.unix(c).format("D/M h:mma"),l=n[r].buoyInstances[o].readings[s].sensorReadings[u].value;l>500&&(l=500),i.push({timeStamp:d,turbidity:l})}a.readings=i,e.push(a)}return console.log(e),e}function u(e){for(var n,t=s(),r=[],o=[],a=0;a<t.length;a++)if(t[a].name==e){n=[t[a].name];for(var i=0;i<t[a].readings.length;i++)o.push(t[a].readings[i].timeStamp),r.push(t[a].readings[i].turbidity)}if(o.length>10){var u=Math.floor(o.length/10);console.log(u),C.labels.unshift("");for(var a=1;a<o.length;a++)a%u!=0&&(o[a]=""),console.log(o)}C.series=n,C.labels=o,C.labels.unshift(""),C.data=[r],C.data[0].unshift(r[0])}function c(){k.buoys=[],d(),k.times={type:"since",range:{from:null,to:null},point:null,pointReadings:[],inputs:{since:{value:500,quantifier:"months",options:["hours","days","weeks","months"]},range:{from:{date:"",time:""},to:{date:"",time:""}},point:{date:"",time:""}}},k.sensors={},k.sensorInputs={}}function d(){0===k.buoys.length&&G.forEach(function(e){var n={};n.id=e.id,n.name=e.name,n.enabled=!0,n.collapsed=!1,n.indeterminate=!1,n.buoyInstances=[],e.buoyInstances.forEach(function(e){var t={};t.id=e.id,t.name=e.name,t.enabled=!0,n.buoyInstances.push(t)}),k.buoys.push(n)})}function p(){return j}function l(){return k.buoys}function f(){return k.times}function g(){for(var e in k.sensorInputs)k.sensorInputs.hasOwnProperty(e)&&(k.sensors[e].inputs=k.sensorInputs[e]);var n=[];for(var e in k.sensors)k.sensors.hasOwnProperty(e)&&n.push(k.sensors[e]);return n}function m(){return k.sensors}function y(){x()}function h(){var e,n;"since"==k.times.type?(e=t().subtract(k.times.inputs.since.value,k.times.inputs.since.quantifier).unix(),n=t().unix()):"all"==k.times.type?(e=0,n=t().unix()):"range"==k.times.type?(e=k.times.range.from.unix(),n=k.times.range.to.unix()):"point"==k.times.type&&(e=k.times.point.clone().subtract(2,"weeks").unix(),n=k.times.point.clone().add(2,"weeks").unix());var o=r(e,n);return o.then(function(){"point"==k.times.type&&w(),x()}),o}function b(){x()}function v(e){for(var n=0;n<e.length;n++)k.sensors[e[n].id]=e[n],k.sensorInputs.hasOwnProperty(e[n].id)||(k.sensorInputs[e[n].id]={enabled:!1,options:[">","<","="],selected:">",value:""})}function I(){for(var e=j,n=t.unix(e[0].timestamp),r=1;r<e.length;r++)t.unix(e[r].timestamp).isBefore(n)&&(n=t.unix(e[r].timestamp));return n}function w(){var e=[];G.forEach(function(n){n.buoyInstances.forEach(function(n){var r={id:n.readings[0].id,timestamp:n.readings[0].timestamp};n.readings.forEach(function(e){var n=t.unix(r.timestamp).diff(k.times.point),o=t.unix(e.timestamp).diff(k.times.point);Math.abs(o)<Math.abs(n)&&(r.id=e.id,r.timestamp=e.timestamp)}),e.push(r.id)})}),k.times.pointReadings=e}function x(){var e=[],n=[];k.buoys.forEach(function(e){e.enabled&&n.push(e.id)});var t=[];k.buoys.forEach(function(e){e.enabled&&e.buoyInstances.forEach(function(e){e.enabled&&t.push(e.id)})});for(var r=[],o=0;o<G.length;o++){var a=G[o];if(-1!=n.indexOf(a.id))for(var i=0;i<a.buoyInstances.length;i++){var s=a.buoyInstances[i];if(-1!=t.indexOf(s.id))for(var u=0;u<s.readings.length;u++){var c=s.readings[u];T(c)&&B(c)&&r.push(c.id)}}}G.forEach(function(o){if(-1!=n.indexOf(o.id)){var a={};a.id=o.id,a.name=o.name,a.buoyInstances=[],o.buoyInstances.forEach(function(e){if(-1!=t.indexOf(e.id)){var n={};n.id=e.id,n.name=e.name,n.readings=[],e.readings.forEach(function(e){-1!=r.indexOf(e.id)&&n.readings.push(e)}),a.buoyInstances.push(n)}}),e.push(a)}}),j=e}function T(e){if("since"==k.times.type){var n=t().subtract(k.times.inputs.since.value,k.times.inputs.since.quantifier),r=t.unix(e.timestamp);if(!r.isAfter(n))return!1}else if("range"==k.times.type){var r=t.unix(e.timestamp);if(!r.isBetween(k.times.range.from,k.times.range.to))return!1}else if("point"==k.times.type&&-1==k.times.pointReadings.indexOf(e.id))return!1;return!0}function B(e){if(0===Object.keys(k.sensorInputs).length)return!0;for(var n=0;n<e.sensorReadings.length;n++)if(!S(e.sensorReadings[n]))return!1;return!0}function S(e){var n=k.sensorInputs[e.sensorTypeId];if(!n.enabled)return!0;var t=parseInt(n.value,10);if(">"==n.selected){if(e.value<=t)return!1}else if("<"==n.selected){if(e.value>=t)return!1}else if("="==n.selected&&e.value!=t)return!1;return!0}function N(e){var n=t.unix(e.timestamp),r=k.times;if("all"==r.type){var o=t(),a=o.clone().subtract(2,"weeks");return E(n,a,o)}if("since"==r.type){var o=t(),a=t().subtract(r.inputs.since.value,r.inputs.since.quantifier);return E(n,a,o)}if("range"==r.type){var o=r.range.to,a=r.range.from;return E(n,a,o)}if("point"==r.type){if(null===r.point)return 1;var o=r.point,a=o.clone().subtract(2,"weeks");return E(n,a,o)}}function E(e,n,t){return e.isBefore(n)?0:e.isBefore(t)?e.diff(n)/t.diff(n):1}function $(){var e=[];j.forEach(function(n){n.buoyInstances.forEach(function(n){n.readings.forEach(function(n){e.push(n.id)})})}),n.exportData(e)}var G=[],j=[],k={},C={};return c(),i(),{queryReadings:r,querySensors:o,readings:p,buoys:l,times:f,sensors:g,sensorMetadata:m,updateBuoys:y,updateTimes:h,updateFilters:x,updateSensors:b,getOldestReading:I,getRelativeAge:N,exportData:$,setupReadings:s,displayChartInstance:u,chart:a}}angular.module("app.dashboard").factory("dashboard",e),e.$inject=["$log","server","moment"]}(),function(){"use strict";function e(e,n,t){function r(){var e=[{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#444444"}]},{featureType:"landscape",elementType:"all",stylers:[{color:"#f2f2f2"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"road",elementType:"all",stylers:[{saturation:-100},{lightness:45}]},{featureType:"road.highway",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"all",stylers:[{color:"#0B5B91"},{visibility:"on"}]}];g.styles=e,l=new t.maps.Map(document.getElementById("map-canvas"),g),t.maps.event.addListener(l,"zoom_changed",function(){g.zoom=l.getZoom()}),t.maps.event.addListener(l,"center_changed",function(){g.center=l.getCenter()}),t.maps.event.addListener(l,"maptypeid_changed",function(){g.mapTypeId=l.getMapTypeId()}),t.maps.event.addListener(l,"click",function(){h&&c()})}function o(){var n=e.readings(),t=[];n.forEach(function(e){e.buoyInstances.forEach(function(e){t.push(e.id)})});for(var r in m)m.hasOwnProperty(r)&&(r=parseInt(r,10),-1==t.indexOf(r)&&i(r));n.forEach(function(e){e.buoyInstances.forEach(function(e){e.readings.forEach(function(n){var t=n.id;m.hasOwnProperty(t)?(m[t].setOpacity(u(n)),-1!=y.indexOf(t)&&s(t)):a(n,e)})})})}function a(e,n){var r=new t.maps.Marker({position:new t.maps.LatLng(e.latitude,e.longitude),map:l,opacity:u(e)});t.maps.event.addListener(r,"click",function(){d(e,n,r)}),m[e.id]=r}function i(e){m[e].setMap(null),y.push(e),h&&-1!=y.indexOf(b)&&c()}function s(e){m[e].setMap(l),y.splice(y.indexOf(e),1)}function u(n){var t=e.getRelativeAge(n),r=.3;return t*(1-r)+r}function c(){f.close(),h=!1}function d(n,r,o){if(!h||(c(),n.id!=b)){e.displayChartInstance(r.name);var a=p(n,r);f=new InfoBox({content:a,pixelOffset:new t.maps.Size(-60,0),zIndex:null,boxStyle:{color:"white","background-color":"rgb(40, 40, 40)",width:"150px",padding:"10px","border-radius":"10px"},closeBoxMargin:"-6px -6px 2px 2px"}),f.open(l,o),h=!0,b=n.id}}function p(t,r){var o=e.sensorMetadata(),a=n.unix(t.timestamp).format("D MMMM h:mm A"),i="<div><h5 style='color: white'>"+r.name+"</h5>"+a+"<br>---";return t.sensorReadings.forEach(function(e){i+="<br>"+o[e.sensorTypeId].name+": "+e.value+" "+o[e.sensorTypeId].unit}),i+="</div>"}var l,f,g={zoom:11,center:new t.maps.LatLng(-27.573704,153.055818),mapTypeId:t.maps.MapTypeId.ROADMAP},m={},y=[],h=!1,b=-1;return{initialiseMap:r,updateReadings:o}}angular.module("app.dashboard").factory("map",e),e.$inject=["dashboard","moment","google"]}(),function(){"use strict";function e(e){var t="/hello";e.configureStates(n(),t)}function n(){return[{state:"hello",config:{url:"/hello",controller:"HelloController",data:{access:"any"}}}]}angular.module("app.core").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,n){function t(){n.debug("howdy"),e.go("dashboard"),e.includes("hello")&&e.go("login")}t()}angular.module("app.core").controller("HelloController",e),e.$inject=["$state","$log"]}(),function(){"use strict";function e(e,n,t){function r(e){function r(e,r){e.forEach(function(e){n.state(e.state,e.config)}),r&&!i&&(i=!0,t.otherwise(r))}function o(){return e.get()}function a(n){return e.includes(n)}var i=!1;return{configureStates:r,getStates:o,stateActive:a}}this.$get=r,r.$inject=["$state"]}angular.module("app.core").provider("routerHelper",e),e.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,n,t,r,o){function a(){return{headers:{}}}function i(e){return e.headers.Authorization="Bearer "+r.getToken(),e}function s(e){return e.headers["Content-Type"]="application/json",e}function u(n,r){var o={email:n,password:r};return e.post(t+"/api/login",JSON.stringify(o))}function c(){r.logout()}function d(n){var o={email:r.currentUser(),password:n};return e.post(t+"/api/changepassword",JSON.stringify(o))}function p(n){var r={email:n};return e.post(t+"/api/forgotpassword",JSON.stringify(r))}function l(n,r){var o=i(a()),s="?start_time="+n+"&end_time="+r;return e.get(t+"/api/readings"+s,o)}function f(){var n=i(a());return e.get(t+"/api/buoy_groups",n)}function g(){var n=i(a());return e.get(t+"/api/buoy_instances?active=true",n)}function m(n,r){var o=s(i(a())),u={name:r};return e.put(t+"/api/buoy_groups/"+n,JSON.stringify(u),o)}function y(n,r,o){var u=s(i(a())),c={name:r,buoyGroupId:o};return e.put(t+"/api/buoy_instances/"+n,JSON.stringify(c),u)}function h(n){var r=s(i(a())),o={name:n};return e.post(t+"/api/buoy_groups",JSON.stringify(o),r)}function b(n,r,o){var u=s(i(a())),c={name:o,buoyId:n,buoyGroupId:r};return e.post(t+"/api/buoy_instances",JSON.stringify(c),u)}function v(){var n=i(a());return e.get(t+"/api/command_types",n)}function I(){var n=i(a());return e.get(t+"/api/commands?sent=false",n)}function w(r){var s=i(a());s.responseType="arraybuffer",s.headers.Accept="text/csv";var u=e.get(t+"/api/export?readings="+r.join(),s);return u.then(function(e){var n=o().format("DD-MM-YY-HHmmss"),t="export-"+n+".csv";x(t,e.data,"text/csv")},function(e){n.error(e)}),u}function x(e,n,t){var r=new Blob([n],{type:t});saveAs(r,e)}function T(n,r){var o=s(i(a())),u={commands:[]};return r.forEach(function(e){u.commands.push({commandTypeId:n.id,value:parseInt(n.value,10),buoyId:e})}),e.post(t+"/api/commands",JSON.stringify(u),o)}function B(e){}function S(){var n=i(a());return e.get(t+"/api/warning_triggers?active_instances=true",n)}function N(n,r){var o=s(i(a())),u={warningTriggers:[]};return r.forEach(function(e){u.warningTriggers.push({buoyInstanceId:e,sensorTypeId:n.sensorTypeId,operator:n.operator,value:parseInt(n.value,10),message:n.message})}),e.post(t+"/api/warning_triggers",JSON.stringify(u),o)}function E(){var n=i(a());return e.get(t+"/api/warnings",n)}function $(){var n=i(a());return e.get(t+"/api/sensor_types",n)}function G(){var n=i(a());return e.get(t+"/api/users",n)}function j(n){var r=s(i(a())),o={email:n.email,firstName:n.firstName,lastName:n.lastName,role:n.role};return e.post(t+"/api/users",JSON.stringify(o),r)}function k(n){var r=s(i(a())),o={firstName:n.firstName,lastName:n.lastName,role:n.role};return e.put(t+"/api/users/"+n.id,JSON.stringify(o),r)}function C(n){var r=i(a());return e["delete"](t+"/api/users/"+n,r)}function U(n,r){var o=s(i(a())),u={guid:r,name:n};return e.post(t+"/api/buoys",JSON.stringify(u),o)}return{login:u,logout:c,changePassword:d,forgotPassword:p,getReadings:l,getBuoyGroups:f,getBuoyInstances:g,updateBuoyGroupName:m,updateBuoyInstanceName:y,newBuoyGroup:h,updateBuoyInstanceGroup:b,getCommandTypes:v,getBuoyCommands:I,exportData:w,sendBuoyCommand:T,getWarningTriggers:S,addWarningTriggers:N,getWarnings:E,getSensorTypes:$,getUsers:G,addUser:j,updateUser:k,deleteUser:C,deleteBuoyCommand:B,addBuoy:U}}angular.module("app").factory("server",e),e.$inject=["$http","$log","SERVER_ADDRESS","auth","moment"]}(),function(){"use strict";function e(){function e(){return[{id:1,buoy:1,timestamp:1438933614,latitude:-27.44613423,longitude:153.07834625,readings:{battery:90,pressure:140,sealevel:21,turbidity:14}},{id:2,buoy:2,timestamp:1438588117,latitude:-27.42693772,longitude:153.20674896,readings:{battery:70,pressure:122,sealevel:44,turbidity:4}},{id:3,buoy:2,timestamp:1438760876,latitude:-27.491475,longitude:153.006655,readings:{battery:45,pressure:85,sealevel:15,turbidity:45}},{id:4,buoy:4,timestamp:1438847291,latitude:-27.400357,longitude:153.177995,readings:{battery:75,pressure:97,sealevel:33,turbidity:66}},{id:77,buoy:1,timestamp:1438328839,latitude:-27.44713423,longitude:153.09234625,readings:{battery:83,pressure:118,sealevel:24.5,turbidity:8}}]}function n(){return[{id:"battery",name:"Battery",description:"Battery level of buoy",colour:"",units:"%",lowerBound:0,upperBound:100,display:!0,unconfigured:!1},{id:"turbidity",name:"Turbidity",description:"Water quality around buoy",colour:"",units:"g/ml",lowerBound:0,upperBound:70,display:!0,unconfigured:!1},{id:"pressure",name:"",description:"",colour:"",units:"",lowerBound:-1,upperBound:-1,display:!1,unconfigured:!0}]}function t(){}function r(){}return{getReadings:e,getSensors:n,login:t,logout:r}}angular.module("mock.server",[]).factory("server",e)}(),function(){"use strict";angular.module("app.gui").config(["$datepickerProvider","$timepickerProvider","$httpProvider",function(e,n,t){t.interceptors.push("authInterceptor"),angular.extend(e.defaults,{autoclose:!0,dateFormat:"d/M/yy",modelDateFormat:"d/M/yy",dateType:"string",startWeek:1}),angular.extend(n.defaults,{autoclose:!1,timeFormat:"h:mm a",modelTimeFormat:"h:mm a",timeType:"string"})}])}(),function(){"use strict";function e(e,n,t,r){function o(){e.$on("$stateChangeSuccess",function(){c=r.loggedIn()})}function a(e){return t.stateActive(e)}function i(e){switch(e){case"dashboard":return c;case"config":return r.checkUser("power_user");case"warnings":return c;case"admin":return r.checkUser("system_admin");case"logout":return c;default:return!1}}function s(){r.logout(),c=!1,n.go("login")}var u=this,c=r.loggedIn();u.checkShowNav=i,u.stateActive=a,u.logout=s,o()}angular.module("app.nav").controller("NavController",e),e.$inject=["$rootScope","$state","routerHelper","auth"]}(),function(){"use strict";function e(e,n,t){function r(){o()}function o(){n.getWarnings().then(function(e){u.warnings=e.data.warnings,a()},function(n){e.error(n)})}function a(){n.getBuoyInstances().then(function(e){u.buoyInstances=e.data.buoyInstances,i()},function(n){e.error(n)})}function i(){n.getSensorTypes().then(function(e){u.sensorTypes=e.data.sensorTypes,s()},function(n){e.error(n)})}function s(){u.warnings.forEach(function(e){e.readingTime=t(e.readingTimestamp,"X").format("DD/MM/YY HH:mm A");for(var n=0;n<u.buoyInstances.length;n++){var r=u.buoyInstances[n];if(r.id==e.warningTrigger.buoyInstanceId){e.buoyName=r.name;break}}for(var n=0;n<u.sensorTypes.length;n++){var o=u.sensorTypes[n];if(o.id==e.warningTrigger.sensorTypeId){e.sensorName=o.name;break}}})}var u=this;u.warnings=[],u.buoyInstances=[],u.sensorTypes=[],r()}angular.module("app.warnings").controller("WarningsController",e),e.$inject=["$log","server","moment"]}(),function(){"use strict";function e(e){e.configureStates(n())}function n(){return[{state:"warnings",config:{url:"/warnings",controller:"WarningsController",controllerAs:"vm",templateUrl:"/app/warnings/warnings.html",data:{access:"authed"}}}]}angular.module("app.warnings").run(e),e.$inject=["routerHelper"]}();
//# sourceMappingURL=data:application/json;base64,