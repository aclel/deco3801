{"version":3,"sources":["bower_components/ember/ember-testing.js","bower_components/blanket/dist/qunit/blanket.js"],"sourcesContent":["/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011-2014 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   1.10.0\n */\n\n(function() {\nvar enifed, requireModule, eriuqer, requirejs, Ember;\n\n(function() {\n  Ember = this.Ember = this.Ember || {};\n  if (typeof Ember === 'undefined') { Ember = {}; };\n  function UNDEFINED() { }\n\n  if (typeof Ember.__loader === 'undefined') {\n    var registry = {}, seen = {};\n\n    enifed = function(name, deps, callback) {\n      registry[name] = { deps: deps, callback: callback };\n    };\n\n    requirejs = eriuqer = requireModule = function(name) {\n      var s = seen[name];\n\n      if (s !== undefined) { return seen[name]; }\n      if (s === UNDEFINED) { return undefined;  }\n\n      seen[name] = {};\n\n      if (!registry[name]) {\n        throw new Error('Could not find module ' + name);\n      }\n\n      var mod = registry[name];\n      var deps = mod.deps;\n      var callback = mod.callback;\n      var reified = [];\n      var exports;\n      var length = deps.length;\n\n      for (var i=0; i<length; i++) {\n        if (deps[i] === 'exports') {\n          reified.push(exports = {});\n        } else {\n          reified.push(requireModule(resolve(deps[i], name)));\n        }\n      }\n\n      var value = length === 0 ? callback.call(this) : callback.apply(this, reified);\n\n      return seen[name] = exports || (value === undefined ? UNDEFINED : value);\n    };\n\n    function resolve(child, name) {\n      if (child.charAt(0) !== '.') {\n        return child;\n      }\n      var parts = child.split('/');\n      var parentBase = name.split('/').slice(0, -1);\n\n      for (var i=0, l=parts.length; i<l; i++) {\n        var part = parts[i];\n\n        if (part === '..') { parentBase.pop(); }\n        else if (part === '.') { continue; }\n        else { parentBase.push(part); }\n      }\n\n      return parentBase.join('/');\n    }\n\n    requirejs._eak_seen = registry;\n\n    Ember.__loader = {\n      define: enifed,\n      require: eriuqer,\n      registry: registry\n    };\n  } else {\n    enifed = Ember.__loader.define;\n    requirejs = eriuqer = requireModule = Ember.__loader.require;\n  }\n})();\n\nenifed(\"ember-debug\",\n  [\"ember-metal/core\",\"ember-metal/error\",\"ember-metal/logger\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    /*global __fail__*/\n\n    var Ember = __dependency1__[\"default\"];\n    var EmberError = __dependency2__[\"default\"];\n    var Logger = __dependency3__[\"default\"];\n\n    /**\n    Ember Debug\n\n    @module ember\n    @submodule ember-debug\n    */\n\n    /**\n    @class Ember\n    */\n\n    /**\n      Define an assertion that will throw an exception if the condition is not\n      met. Ember build tools will remove any calls to `Ember.assert()` when\n      doing a production build. Example:\n\n      ```javascript\n      // Test for truthiness\n      Ember.assert('Must pass a valid object', obj);\n\n      // Fail unconditionally\n      Ember.assert('This code path should never be run');\n      ```\n\n      @method assert\n      @param {String} desc A description of the assertion. This will become\n        the text of the Error thrown if the assertion fails.\n      @param {Boolean} test Must be truthy for the assertion to pass. If\n        falsy, an exception will be thrown.\n    */\n    Ember.assert = function(desc, test) {\n      var throwAssertion;\n\n      if (Ember.typeOf(test) === 'function') {\n        throwAssertion = !test();\n      } else {\n        throwAssertion = !test;\n      }\n\n      if (throwAssertion) {\n        throw new EmberError(\"Assertion Failed: \" + desc);\n      }\n    };\n\n\n    /**\n      Display a warning with the provided message. Ember build tools will\n      remove any calls to `Ember.warn()` when doing a production build.\n\n      @method warn\n      @param {String} message A warning to display.\n      @param {Boolean} test An optional boolean. If falsy, the warning\n        will be displayed.\n    */\n    Ember.warn = function(message, test) {\n      if (!test) {\n        Logger.warn(\"WARNING: \"+message);\n        if ('trace' in Logger) {\n          Logger.trace();\n        }\n      }\n    };\n\n    /**\n      Display a debug notice. Ember build tools will remove any calls to\n      `Ember.debug()` when doing a production build.\n\n      ```javascript\n      Ember.debug('I\\'m a debug notice!');\n      ```\n\n      @method debug\n      @param {String} message A debug message to display.\n    */\n    Ember.debug = function(message) {\n      Logger.debug(\"DEBUG: \"+message);\n    };\n\n    /**\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only). Ember build tools will remove any calls to\n      `Ember.deprecate()` when doing a production build.\n\n      @method deprecate\n      @param {String} message A description of the deprecation.\n      @param {Boolean} test An optional boolean. If falsy, the deprecation\n        will be displayed.\n      @param {Object} options An optional object that can be used to pass\n        in a `url` to the transition guide on the emberjs.com website.\n    */\n    Ember.deprecate = function(message, test, options) {\n      var noDeprecation;\n\n      if (typeof test === 'function') {\n        noDeprecation = test();\n      } else {\n        noDeprecation = test;\n      }\n\n      if (noDeprecation) { return; }\n\n      if (Ember.ENV.RAISE_ON_DEPRECATION) { throw new EmberError(message); }\n\n      var error;\n\n      // When using new Error, we can't do the arguments check for Chrome. Alternatives are welcome\n      try { __fail__.fail(); } catch (e) { error = e; }\n\n      if (arguments.length === 3) {\n        Ember.assert('options argument to Ember.deprecate should be an object', options && typeof options === 'object');\n        if (options.url) {\n          message += ' See ' + options.url + ' for more details.';\n        }\n      }\n\n      if (Ember.LOG_STACKTRACE_ON_DEPRECATION && error.stack) {\n        var stack;\n        var stackStr = '';\n\n        if (error['arguments']) {\n          // Chrome\n          stack = error.stack.replace(/^\\s+at\\s+/gm, '').\n                              replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').\n                              replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n          stack.shift();\n        } else {\n          // Firefox\n          stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').\n                              replace(/^\\(/gm, '{anonymous}(').split('\\n');\n        }\n\n        stackStr = \"\\n    \" + stack.slice(2).join(\"\\n    \");\n        message = message + stackStr;\n      }\n\n      Logger.warn(\"DEPRECATION: \"+message);\n    };\n\n\n\n    /**\n      Alias an old, deprecated method with its new counterpart.\n\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only) when the assigned method is called.\n\n      Ember build tools will not remove calls to `Ember.deprecateFunc()`, though\n      no warnings will be shown in production.\n\n      ```javascript\n      Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n      ```\n\n      @method deprecateFunc\n      @param {String} message A description of the deprecation.\n      @param {Function} func The new function called to replace its deprecated counterpart.\n      @return {Function} a new function that wrapped the original function with a deprecation warning\n    */\n    Ember.deprecateFunc = function(message, func) {\n      return function() {\n        Ember.deprecate(message);\n        return func.apply(this, arguments);\n      };\n    };\n\n\n    /**\n      Run a function meant for debugging. Ember build tools will remove any calls to\n      `Ember.runInDebug()` when doing a production build.\n\n      ```javascript\n      Ember.runInDebug(function() {\n        Ember.Handlebars.EachView.reopen({\n          didInsertElement: function() {\n            console.log('I\\'m happy');\n          }\n        });\n      });\n      ```\n\n      @method runInDebug\n      @param {Function} func The function to be executed.\n      @since 1.5.0\n    */\n    Ember.runInDebug = function(func) {\n      func();\n    };\n\n    /**\n      Will call `Ember.warn()` if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or\n      any specific FEATURES flag is truthy.\n\n      This method is called automatically in debug canary builds.\n      \n      @private\n      @method _warnIfUsingStrippedFeatureFlags\n      @return {void}\n    */\n    function _warnIfUsingStrippedFeatureFlags(FEATURES, featuresWereStripped) {\n      if (featuresWereStripped) {\n        Ember.warn('Ember.ENV.ENABLE_ALL_FEATURES is only available in canary builds.', !Ember.ENV.ENABLE_ALL_FEATURES);\n        Ember.warn('Ember.ENV.ENABLE_OPTIONAL_FEATURES is only available in canary builds.', !Ember.ENV.ENABLE_OPTIONAL_FEATURES);\n\n        for (var key in FEATURES) {\n          if (FEATURES.hasOwnProperty(key) && key !== 'isEnabled') {\n            Ember.warn('FEATURE[\"' + key + '\"] is set as enabled, but FEATURE flags are only available in canary builds.', !FEATURES[key]);\n          }\n        }\n      }\n    }\n\n    __exports__._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;if (!Ember.testing) {\n      // Complain if they're using FEATURE flags in builds other than canary\n      Ember.FEATURES['features-stripped-test'] = true;\n      var featuresWereStripped = true;\n      \n      \n      delete Ember.FEATURES['features-stripped-test'];\n      _warnIfUsingStrippedFeatureFlags(Ember.ENV.FEATURES, featuresWereStripped);\n\n      // Inform the developer about the Ember Inspector if not installed.\n      var isFirefox = typeof InstallTrigger !== 'undefined';\n      var isChrome = !!window.chrome && !window.opera;\n\n      if (typeof window !== 'undefined' && (isFirefox || isChrome) && window.addEventListener) {\n        window.addEventListener(\"load\", function() {\n          if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {\n            var downloadURL;\n\n            if(isChrome) {\n              downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n            } else if(isFirefox) {\n              downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n            }\n\n            Ember.debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);\n          }\n        }, false);\n      }\n    }\n\n    /*\n      We are transitioning away from `ember.js` to `ember.debug.js` to make\n      it much clearer that it is only for local development purposes.\n\n      This flag value is changed by the tooling (by a simple string replacement)\n      so that if `ember.js` (which must be output for backwards compat reasons) is\n      used a nice helpful warning message will be printed out.\n    */\n    var runningNonEmberDebugJS = false;\n    __exports__.runningNonEmberDebugJS = runningNonEmberDebugJS;if (runningNonEmberDebugJS) {\n      Ember.warn('Please use `ember.debug.js` instead of `ember.js` for development and debugging.');\n    }\n  });\nenifed(\"ember-testing\",\n  [\"ember-metal/core\",\"ember-testing/initializers\",\"ember-testing/support\",\"ember-testing/setup_for_testing\",\"ember-testing/test\",\"ember-testing/adapters/adapter\",\"ember-testing/adapters/qunit\",\"ember-testing/helpers\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    // to setup initializer\n         // to handle various edge cases\n\n    var setupForTesting = __dependency4__[\"default\"];\n    var Test = __dependency5__[\"default\"];\n    var Adapter = __dependency6__[\"default\"];\n    var QUnitAdapter = __dependency7__[\"default\"];\n         // adds helpers to helpers object in Test\n\n    /**\n      Ember Testing\n\n      @module ember\n      @submodule ember-testing\n      @requires ember-application\n    */\n\n    Ember.Test = Test;\n    Ember.Test.Adapter = Adapter;\n    Ember.Test.QUnitAdapter = QUnitAdapter;\n    Ember.setupForTesting = setupForTesting;\n  });\nenifed(\"ember-testing/adapters/adapter\",\n  [\"ember-runtime/system/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var EmberObject = __dependency1__[\"default\"];\n\n    function K() { return this; }\n\n    /**\n     @module ember\n     @submodule ember-testing\n    */\n\n    /**\n      The primary purpose of this class is to create hooks that can be implemented\n      by an adapter for various test frameworks.\n\n      @class Adapter\n      @namespace Ember.Test\n    */\n    var Adapter = EmberObject.extend({\n      /**\n        This callback will be called whenever an async operation is about to start.\n\n        Override this to call your framework's methods that handle async\n        operations.\n\n        @public\n        @method asyncStart\n      */\n      asyncStart: K,\n\n      /**\n        This callback will be called whenever an async operation has completed.\n\n        @public\n        @method asyncEnd\n      */\n      asyncEnd: K,\n\n      /**\n        Override this method with your testing framework's false assertion.\n        This function is called whenever an exception occurs causing the testing\n        promise to fail.\n\n        QUnit example:\n\n        ```javascript\n          exception: function(error) {\n            ok(false, error);\n          };\n        ```\n\n        @public\n        @method exception\n        @param {String} error The exception to be raised.\n      */\n      exception: function(error) {\n        throw error;\n      }\n    });\n\n    __exports__[\"default\"] = Adapter;\n  });\nenifed(\"ember-testing/adapters/qunit\",\n  [\"ember-testing/adapters/adapter\",\"ember-metal/utils\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Adapter = __dependency1__[\"default\"];\n    var inspect = __dependency2__.inspect;\n\n    /**\n      This class implements the methods defined by Ember.Test.Adapter for the\n      QUnit testing framework.\n\n      @class QUnitAdapter\n      @namespace Ember.Test\n      @extends Ember.Test.Adapter\n    */\n    __exports__[\"default\"] = Adapter.extend({\n      asyncStart: function() {\n        QUnit.stop();\n      },\n      asyncEnd: function() {\n        QUnit.start();\n      },\n      exception: function(error) {\n        ok(false, inspect(error));\n      }\n    });\n  });\nenifed(\"ember-testing/helpers\",\n  [\"ember-metal/property_get\",\"ember-metal/error\",\"ember-metal/run_loop\",\"ember-views/system/jquery\",\"ember-testing/test\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    var get = __dependency1__.get;\n    var EmberError = __dependency2__[\"default\"];\n    var run = __dependency3__[\"default\"];\n    var jQuery = __dependency4__[\"default\"];\n    var Test = __dependency5__[\"default\"];\n\n    /**\n    * @module ember\n    * @submodule ember-testing\n    */\n\n    var helper = Test.registerHelper;\n    var asyncHelper = Test.registerAsyncHelper;\n    var countAsync = 0;\n\n    function currentRouteName(app){\n      var appController = app.__container__.lookup('controller:application');\n\n      return get(appController, 'currentRouteName');\n    }\n\n    function currentPath(app){\n      var appController = app.__container__.lookup('controller:application');\n\n      return get(appController, 'currentPath');\n    }\n\n    function currentURL(app){\n      var router = app.__container__.lookup('router:main');\n\n      return get(router, 'location').getURL();\n    }\n\n    function pauseTest(){\n      Test.adapter.asyncStart();\n      return new Ember.RSVP.Promise(function(){ }, 'TestAdapter paused promise');\n    }\n\n    function visit(app, url) {\n      var router = app.__container__.lookup('router:main');\n      router.location.setURL(url);\n\n      if (app._readinessDeferrals > 0) {\n        router['initialURL'] = url;\n        run(app, 'advanceReadiness');\n        delete router['initialURL'];\n      } else {\n        run(app, app.handleURL, url);\n      }\n\n      return app.testHelpers.wait();\n    }\n\n    function click(app, selector, context) {\n      var $el = app.testHelpers.findWithAssert(selector, context);\n      run($el, 'mousedown');\n\n      if ($el.is(':input, [contenteditable=true]')) {\n        var type = $el.prop('type');\n        if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n          run($el, function(){\n            // Firefox does not trigger the `focusin` event if the window\n            // does not have focus. If the document doesn't have focus just\n            // use trigger('focusin') instead.\n            if (!document.hasFocus || document.hasFocus()) {\n              this.focus();\n            } else {\n              this.trigger('focusin');\n            }\n          });\n        }\n      }\n\n      run($el, 'mouseup');\n      run($el, 'click');\n\n      return app.testHelpers.wait();\n    }\n\n    function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions){\n      var arity = arguments.length;\n      var context, type, options;\n\n      if (arity === 3) {\n        // context and options are optional, so this is\n        // app, selector, type\n        context = null;\n        type = contextOrType;\n        options = {};\n      } else if (arity === 4) {\n        // context and options are optional, so this is\n        if (typeof typeOrOptions === \"object\") {  // either\n          // app, selector, type, options\n          context = null;\n          type = contextOrType;\n          options = typeOrOptions;\n        } else { // or\n          // app, selector, context, type\n          context = contextOrType;\n          type = typeOrOptions;\n          options = {};\n        }\n      } else {\n        context = contextOrType;\n        type = typeOrOptions;\n        options = possibleOptions;\n      }\n\n      var $el = app.testHelpers.findWithAssert(selector, context);\n\n      var event = jQuery.Event(type, options);\n\n      run($el, 'trigger', event);\n\n      return app.testHelpers.wait();\n    }\n\n    function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {\n      var context, type;\n\n      if (typeof keyCode === 'undefined') {\n        context = null;\n        keyCode = typeOrKeyCode;\n        type = contextOrType;\n      } else {\n        context = contextOrType;\n        type = typeOrKeyCode;\n      }\n\n      return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });\n    }\n\n    function fillIn(app, selector, contextOrText, text) {\n      var $el, context;\n      if (typeof text === 'undefined') {\n        text = contextOrText;\n      } else {\n        context = contextOrText;\n      }\n      $el = app.testHelpers.findWithAssert(selector, context);\n      run(function() {\n        $el.val(text).change();\n      });\n      return app.testHelpers.wait();\n    }\n\n    function findWithAssert(app, selector, context) {\n      var $el = app.testHelpers.find(selector, context);\n      if ($el.length === 0) {\n        throw new EmberError(\"Element \" + selector + \" not found.\");\n      }\n      return $el;\n    }\n\n    function find(app, selector, context) {\n      var $el;\n      context = context || get(app, 'rootElement');\n      $el = app.$(selector, context);\n\n      return $el;\n    }\n\n    function andThen(app, callback) {\n      return app.testHelpers.wait(callback(app));\n    }\n\n    function wait(app, value) {\n      return Test.promise(function(resolve) {\n        // If this is the first async promise, kick off the async test\n        if (++countAsync === 1) {\n          Test.adapter.asyncStart();\n        }\n\n        // Every 10ms, poll for the async thing to have finished\n        var watcher = setInterval(function() {\n          var router = app.__container__.lookup('router:main');\n\n          // 1. If the router is loading, keep polling\n          var routerIsLoading = router.router && !!router.router.activeTransition;\n          if (routerIsLoading) { return; }\n\n          // 2. If there are pending Ajax requests, keep polling\n          if (Test.pendingAjaxRequests) { return; }\n\n          // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n          if (run.hasScheduledTimers() || run.currentRunLoop) { return; }\n          if (Test.waiters && Test.waiters.any(function(waiter) {\n            var context = waiter[0];\n            var callback = waiter[1];\n            return !callback.call(context);\n          })) { return; }\n          // Stop polling\n          clearInterval(watcher);\n\n          // If this is the last async promise, end the async test\n          if (--countAsync === 0) {\n            Test.adapter.asyncEnd();\n          }\n\n          // Synchronously resolve the promise\n          run(null, resolve, value);\n        }, 10);\n      });\n\n    }\n\n\n    /**\n    * Loads a route, sets up any controllers, and renders any templates associated\n    * with the route as though a real user had triggered the route change while\n    * using your app.\n    *\n    * Example:\n    *\n    * ```javascript\n    * visit('posts/index').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method visit\n    * @param {String} url the name of the route\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('visit', visit);\n\n    /**\n    * Clicks an element and triggers any actions triggered by the element's `click`\n    * event.\n    *\n    * Example:\n    *\n    * ```javascript\n    * click('.some-jQuery-selector').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method click\n    * @param {String} selector jQuery selector for finding element on the DOM\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('click', click);\n\n    /**\n    * Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n    *\n    * Example:\n    *\n    * ```javascript\n    * keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n    *  // assert something\n    * });\n    * ```\n    *\n    * @method keyEvent\n    * @param {String} selector jQuery selector for finding element on the DOM\n    * @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`\n    * @param {Number} keyCode the keyCode of the simulated key event\n    * @return {RSVP.Promise}\n    * @since 1.5.0\n    */\n    asyncHelper('keyEvent', keyEvent);\n\n    /**\n    * Fills in an input element with some text.\n    *\n    * Example:\n    *\n    * ```javascript\n    * fillIn('#email', 'you@example.com').then(function() {\n    *   // assert something\n    * });\n    * ```\n    *\n    * @method fillIn\n    * @param {String} selector jQuery selector finding an input element on the DOM\n    * to fill text with\n    * @param {String} text text to place inside the input element\n    * @return {RSVP.Promise}\n    */\n    asyncHelper('fillIn', fillIn);\n\n    /**\n    * Finds an element in the context of the app's container element. A simple alias\n    * for `app.$(selector)`.\n    *\n    * Example:\n    *\n    * ```javascript\n    * var $el = find('.my-selector');\n    * ```\n    *\n    * @method find\n    * @param {String} selector jQuery string selector for element lookup\n    * @return {Object} jQuery object representing the results of the query\n    */\n    helper('find', find);\n\n    /**\n    * Like `find`, but throws an error if the element selector returns no results.\n    *\n    * Example:\n    *\n    * ```javascript\n    * var $el = findWithAssert('.doesnt-exist'); // throws error\n    * ```\n    *\n    * @method findWithAssert\n    * @param {String} selector jQuery selector string for finding an element within\n    * the DOM\n    * @return {Object} jQuery object representing the results of the query\n    * @throws {Error} throws error if jQuery object returned has a length of 0\n    */\n    helper('findWithAssert', findWithAssert);\n\n    /**\n      Causes the run loop to process any pending events. This is used to ensure that\n      any async operations from other helpers (or your assertions) have been processed.\n\n      This is most often used as the return value for the helper functions (see 'click',\n      'fillIn','visit',etc).\n\n      Example:\n\n      ```javascript\n      Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n        visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', password)\n        .click('.submit')\n\n        return app.testHelpers.wait();\n      });\n\n      @method wait\n      @param {Object} value The value to be returned.\n      @return {RSVP.Promise}\n    */\n    asyncHelper('wait', wait);\n    asyncHelper('andThen', andThen);\n\n\n    /**\n      Returns the currently active route name.\n\n    Example:\n\n    ```javascript\n    function validateRouteName(){\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n    }\n\n    visit('/some/path').then(validateRouteName)\n    ```\n\n    @method currentRouteName\n    @return {Object} The name of the currently active route.\n    @since 1.5.0\n    */\n    helper('currentRouteName', currentRouteName);\n\n    /**\n      Returns the current path.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```\n\n    @method currentPath\n    @return {Object} The currently active path.\n    @since 1.5.0\n    */\n    helper('currentPath', currentPath);\n\n    /**\n      Returns the current URL.\n\n    Example:\n\n    ```javascript\n    function validateURL(){\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n    }\n\n    click('#some-link-id').then(validateURL);\n    ```\n\n    @method currentURL\n    @return {Object} The currently active URL.\n    @since 1.5.0\n    */\n    helper('currentURL', currentURL);\n\n    \n      /**\n       Pauses the current test - this is useful for debugging while testing or for test-driving.\n       It allows you to inspect the state of your application at any point.\n\n       Example (The test will pause before clicking the button):\n\n       ```javascript\n       visit('/')\n       return pauseTest();\n\n       click('.btn');\n       ```\n\n       @since 1.9.0\n       @method pauseTest\n       @return {Object} A promise that will never resolve\n       */\n      helper('pauseTest', pauseTest);\n    \n\n    /**\n      Triggers the given DOM event on the element identified by the provided selector.\n\n      Example:\n\n      ```javascript\n      triggerEvent('#some-elem-id', 'blur');\n      ```\n\n      This is actually used internally by the `keyEvent` helper like so:\n\n      ```javascript\n      triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n      ```\n\n     @method triggerEvent\n     @param {String} selector jQuery selector for finding element on the DOM\n     @param {String} [context] jQuery selector that will limit the selector\n                               argument to find only within the context's children\n     @param {String} type The event type to be triggered.\n     @param {Object} [options] The options to be passed to jQuery.Event.\n     @return {RSVP.Promise}\n     @since 1.5.0\n    */\n    asyncHelper('triggerEvent', triggerEvent);\n  });\nenifed(\"ember-testing/initializers\",\n  [\"ember-runtime/system/lazy_load\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var onLoad = __dependency1__.onLoad;\n\n    var name = 'deferReadiness in `testing` mode';\n\n    onLoad('Ember.Application', function(Application) {\n      if (!Application.initializers[name]) {\n        Application.initializer({\n          name: name,\n\n          initialize: function(container, application){\n            if (application.testing) {\n              application.deferReadiness();\n            }\n          }\n        });\n      }\n    });\n  });\nenifed(\"ember-testing/setup_for_testing\",\n  [\"ember-metal/core\",\"ember-testing/adapters/qunit\",\"ember-views/system/jquery\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    // import Test from \"ember-testing/test\";  // ES6TODO: fix when cycles are supported\n    var QUnitAdapter = __dependency2__[\"default\"];\n    var jQuery = __dependency3__[\"default\"];\n\n    var Test, requests;\n\n    function incrementAjaxPendingRequests(_, xhr){\n      requests.push(xhr);\n      Test.pendingAjaxRequests = requests.length;\n    }\n\n    function decrementAjaxPendingRequests(_, xhr){\n      for (var i=0;i<requests.length;i++) {\n        if (xhr === requests[i]) {\n          requests.splice(i, 1);\n        }\n      }\n      Test.pendingAjaxRequests = requests.length;\n    }\n\n    /**\n      Sets Ember up for testing. This is useful to perform\n      basic setup steps in order to unit test.\n\n      Use `App.setupForTesting` to perform integration tests (full\n      application testing).\n\n      @method setupForTesting\n      @namespace Ember\n      @since 1.5.0\n    */\n    __exports__[\"default\"] = function setupForTesting() {\n      if (!Test) { Test = requireModule('ember-testing/test')['default']; }\n\n      Ember.testing = true;\n\n      // if adapter is not manually set default to QUnit\n      if (!Test.adapter) {\n        Test.adapter = QUnitAdapter.create();\n      }\n\n      requests = [];\n      Test.pendingAjaxRequests = requests.length;\n\n      jQuery(document).off('ajaxSend', incrementAjaxPendingRequests);\n      jQuery(document).off('ajaxComplete', decrementAjaxPendingRequests);\n      jQuery(document).on('ajaxSend', incrementAjaxPendingRequests);\n      jQuery(document).on('ajaxComplete', decrementAjaxPendingRequests);\n    }\n  });\nenifed(\"ember-testing/support\",\n  [\"ember-metal/core\",\"ember-views/system/jquery\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var jQuery = __dependency2__[\"default\"];\n\n    /**\n      @module ember\n      @submodule ember-testing\n     */\n\n    var $ = jQuery;\n\n    /**\n      This method creates a checkbox and triggers the click event to fire the\n      passed in handler. It is used to correct for a bug in older versions\n      of jQuery (e.g 1.8.3).\n\n      @private\n      @method testCheckboxClick\n    */\n    function testCheckboxClick(handler) {\n      $('<input type=\"checkbox\">')\n        .css({ position: 'absolute', left: '-1000px', top: '-1000px' })\n        .appendTo('body')\n        .on('click', handler)\n        .trigger('click')\n        .remove();\n    }\n\n    $(function() {\n      /*\n        Determine whether a checkbox checked using jQuery's \"click\" method will have\n        the correct value for its checked property.\n\n        If we determine that the current jQuery version exhibits this behavior,\n        patch it to work correctly as in the commit for the actual fix:\n        https://github.com/jquery/jquery/commit/1fb2f92.\n      */\n      testCheckboxClick(function() {\n        if (!this.checked && !$.event.special.click) {\n          $.event.special.click = {\n            // For checkbox, fire native event so checked state will be right\n            trigger: function() {\n              if ($.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click) {\n                this.click();\n                return false;\n              }\n            }\n          };\n        }\n      });\n\n      // Try again to verify that the patch took effect or blow up.\n      testCheckboxClick(function() {\n        Ember.warn(\"clicked checkboxes should be checked! the jQuery patch didn't work\", this.checked);\n      });\n    });\n  });\nenifed(\"ember-testing/test\",\n  [\"ember-metal/core\",\"ember-metal/run_loop\",\"ember-metal/platform\",\"ember-runtime/ext/rsvp\",\"ember-testing/setup_for_testing\",\"ember-application/system/application\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var emberRun = __dependency2__[\"default\"];\n    var create = __dependency3__.create;\n    var RSVP = __dependency4__[\"default\"];\n    var setupForTesting = __dependency5__[\"default\"];\n    var EmberApplication = __dependency6__[\"default\"];\n\n    /**\n      @module ember\n      @submodule ember-testing\n     */\n    var slice = [].slice;\n    var helpers = {};\n    var injectHelpersCallbacks = [];\n\n    /**\n      This is a container for an assortment of testing related functionality:\n\n      * Choose your default test adapter (for your framework of choice).\n      * Register/Unregister additional test helpers.\n      * Setup callbacks to be fired when the test helpers are injected into\n        your application.\n\n      @class Test\n      @namespace Ember\n    */\n    var Test = {\n      /**\n        Hash containing all known test helpers.\n\n        @property _helpers\n        @private\n        @since 1.7.0\n      */\n      _helpers: helpers,\n\n      /**\n        `registerHelper` is used to register a test helper that will be injected\n        when `App.injectTestHelpers` is called.\n\n        The helper method will always be called with the current Application as\n        the first parameter.\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerHelper('boot', function(app) {\n          Ember.run(app, app.advanceReadiness);\n        });\n        ```\n\n        This helper can later be called without arguments because it will be\n        called with `app` as the first parameter.\n\n        ```javascript\n        App = Ember.Application.create();\n        App.injectTestHelpers();\n        boot();\n        ```\n\n        @public\n        @method registerHelper\n        @param {String} name The name of the helper method to add.\n        @param {Function} helperMethod\n        @param options {Object}\n      */\n      registerHelper: function(name, helperMethod) {\n        helpers[name] = {\n          method: helperMethod,\n          meta: { wait: false }\n        };\n      },\n\n      /**\n        `registerAsyncHelper` is used to register an async test helper that will be injected\n        when `App.injectTestHelpers` is called.\n\n        The helper method will always be called with the current Application as\n        the first parameter.\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerAsyncHelper('boot', function(app) {\n          Ember.run(app, app.advanceReadiness);\n        });\n        ```\n\n        The advantage of an async helper is that it will not run\n        until the last async helper has completed.  All async helpers\n        after it will wait for it complete before running.\n\n\n        For example:\n\n        ```javascript\n        Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {\n          click('.delete-' + postId);\n        });\n\n        // ... in your test\n        visit('/post/2');\n        deletePost(2);\n        visit('/post/3');\n        deletePost(3);\n        ```\n\n        @public\n        @method registerAsyncHelper\n        @param {String} name The name of the helper method to add.\n        @param {Function} helperMethod\n        @since 1.2.0\n      */\n      registerAsyncHelper: function(name, helperMethod) {\n        helpers[name] = {\n          method: helperMethod,\n          meta: { wait: true }\n        };\n      },\n\n      /**\n        Remove a previously added helper method.\n\n        Example:\n\n        ```javascript\n        Ember.Test.unregisterHelper('wait');\n        ```\n\n        @public\n        @method unregisterHelper\n        @param {String} name The helper to remove.\n      */\n      unregisterHelper: function(name) {\n        delete helpers[name];\n        delete Test.Promise.prototype[name];\n      },\n\n      /**\n        Used to register callbacks to be fired whenever `App.injectTestHelpers`\n        is called.\n\n        The callback will receive the current application as an argument.\n\n        Example:\n\n        ```javascript\n        Ember.Test.onInjectHelpers(function() {\n          Ember.$(document).ajaxSend(function() {\n            Test.pendingAjaxRequests++;\n          });\n\n          Ember.$(document).ajaxComplete(function() {\n            Test.pendingAjaxRequests--;\n          });\n        });\n        ```\n\n        @public\n        @method onInjectHelpers\n        @param {Function} callback The function to be called.\n      */\n      onInjectHelpers: function(callback) {\n        injectHelpersCallbacks.push(callback);\n      },\n\n      /**\n        This returns a thenable tailored for testing.  It catches failed\n        `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n        callback in the last chained then.\n\n        This method should be returned by async helpers such as `wait`.\n\n        @public\n        @method promise\n        @param {Function} resolver The function used to resolve the promise.\n      */\n      promise: function(resolver) {\n        return new Test.Promise(resolver);\n      },\n\n      /**\n       Used to allow ember-testing to communicate with a specific testing\n       framework.\n\n       You can manually set it before calling `App.setupForTesting()`.\n\n       Example:\n\n       ```javascript\n       Ember.Test.adapter = MyCustomAdapter.create()\n       ```\n\n       If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n\n       @public\n       @property adapter\n       @type {Class} The adapter to be used.\n       @default Ember.Test.QUnitAdapter\n      */\n      adapter: null,\n\n      /**\n        Replacement for `Ember.RSVP.resolve`\n        The only difference is this uses\n        an instance of `Ember.Test.Promise`\n\n        @public\n        @method resolve\n        @param {Mixed} The value to resolve\n        @since 1.2.0\n      */\n      resolve: function(val) {\n        return Test.promise(function(resolve) {\n          return resolve(val);\n        });\n      },\n\n      /**\n         This allows ember-testing to play nicely with other asynchronous\n         events, such as an application that is waiting for a CSS3\n         transition or an IndexDB transaction.\n\n         For example:\n\n         ```javascript\n         Ember.Test.registerWaiter(function() {\n           return myPendingTransactions() == 0;\n         });\n         ```\n         The `context` argument allows you to optionally specify the `this`\n         with which your callback will be invoked.\n\n         For example:\n\n         ```javascript\n         Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n         ```\n\n         @public\n         @method registerWaiter\n         @param {Object} context (optional)\n         @param {Function} callback\n         @since 1.2.0\n      */\n      registerWaiter: function(context, callback) {\n        if (arguments.length === 1) {\n          callback = context;\n          context = null;\n        }\n        if (!this.waiters) {\n          this.waiters = Ember.A();\n        }\n        this.waiters.push([context, callback]);\n      },\n      /**\n         `unregisterWaiter` is used to unregister a callback that was\n         registered with `registerWaiter`.\n\n         @public\n         @method unregisterWaiter\n         @param {Object} context (optional)\n         @param {Function} callback\n         @since 1.2.0\n      */\n      unregisterWaiter: function(context, callback) {\n        if (!this.waiters) { return; }\n        if (arguments.length === 1) {\n          callback = context;\n          context = null;\n        }\n        this.waiters = Ember.A(this.waiters.filter(function(elt) {\n          return !(elt[0] === context && elt[1] === callback);\n        }));\n      }\n    };\n\n    function helper(app, name) {\n      var fn = helpers[name].method;\n      var meta = helpers[name].meta;\n\n      return function() {\n        var args = slice.call(arguments);\n        var lastPromise = Test.lastPromise;\n\n        args.unshift(app);\n\n        // some helpers are not async and\n        // need to return a value immediately.\n        // example: `find`\n        if (!meta.wait) {\n          return fn.apply(app, args);\n        }\n\n        if (!lastPromise) {\n          // It's the first async helper in current context\n          lastPromise = fn.apply(app, args);\n        } else {\n          // wait for last helper's promise to resolve\n          // and then execute\n          run(function() {\n            lastPromise = Test.resolve(lastPromise).then(function() {\n              return fn.apply(app, args);\n            });\n          });\n        }\n\n        return lastPromise;\n      };\n    }\n\n    function run(fn) {\n      if (!emberRun.currentRunLoop) {\n        emberRun(fn);\n      } else {\n        fn();\n      }\n    }\n\n    EmberApplication.reopen({\n      /**\n       This property contains the testing helpers for the current application. These\n       are created once you call `injectTestHelpers` on your `Ember.Application`\n       instance. The included helpers are also available on the `window` object by\n       default, but can be used from this object on the individual application also.\n\n        @property testHelpers\n        @type {Object}\n        @default {}\n      */\n      testHelpers: {},\n\n      /**\n       This property will contain the original methods that were registered\n       on the `helperContainer` before `injectTestHelpers` is called.\n\n       When `removeTestHelpers` is called, these methods are restored to the\n       `helperContainer`.\n\n        @property originalMethods\n        @type {Object}\n        @default {}\n        @private\n        @since 1.3.0\n      */\n      originalMethods: {},\n\n\n      /**\n      This property indicates whether or not this application is currently in\n      testing mode. This is set when `setupForTesting` is called on the current\n      application.\n\n      @property testing\n      @type {Boolean}\n      @default false\n      @since 1.3.0\n      */\n      testing: false,\n\n      /**\n       This hook defers the readiness of the application, so that you can start\n       the app when your tests are ready to run. It also sets the router's\n       location to 'none', so that the window's location will not be modified\n       (preventing both accidental leaking of state between tests and interference\n       with your testing framework).\n\n       Example:\n\n      ```\n      App.setupForTesting();\n      ```\n\n        @method setupForTesting\n      */\n      setupForTesting: function() {\n        setupForTesting();\n\n        this.testing = true;\n\n        this.Router.reopen({\n          location: 'none'\n        });\n      },\n\n      /**\n        This will be used as the container to inject the test helpers into. By\n        default the helpers are injected into `window`.\n\n        @property helperContainer\n        @type {Object} The object to be used for test helpers.\n        @default window\n        @since 1.2.0\n      */\n      helperContainer: window,\n\n      /**\n        This injects the test helpers into the `helperContainer` object. If an object is provided\n        it will be used as the helperContainer. If `helperContainer` is not set it will default\n        to `window`. If a function of the same name has already been defined it will be cached\n        (so that it can be reset if the helper is removed with `unregisterHelper` or\n        `removeTestHelpers`).\n\n       Any callbacks registered with `onInjectHelpers` will be called once the\n       helpers have been injected.\n\n      Example:\n      ```\n      App.injectTestHelpers();\n      ```\n\n        @method injectTestHelpers\n      */\n      injectTestHelpers: function(helperContainer) {\n        if (helperContainer) { this.helperContainer = helperContainer; }\n\n        this.testHelpers = {};\n        for (var name in helpers) {\n          this.originalMethods[name] = this.helperContainer[name];\n          this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n          protoWrap(Test.Promise.prototype, name, helper(this, name), helpers[name].meta.wait);\n        }\n\n        for(var i = 0, l = injectHelpersCallbacks.length; i < l; i++) {\n          injectHelpersCallbacks[i](this);\n        }\n      },\n\n      /**\n        This removes all helpers that have been registered, and resets and functions\n        that were overridden by the helpers.\n\n        Example:\n\n        ```javascript\n        App.removeTestHelpers();\n        ```\n\n        @public\n        @method removeTestHelpers\n      */\n      removeTestHelpers: function() {\n        for (var name in helpers) {\n          this.helperContainer[name] = this.originalMethods[name];\n          delete this.testHelpers[name];\n          delete this.originalMethods[name];\n        }\n      }\n    });\n\n    // This method is no longer needed\n    // But still here for backwards compatibility\n    // of helper chaining\n    function protoWrap(proto, name, callback, isAsync) {\n      proto[name] = function() {\n        var args = arguments;\n        if (isAsync) {\n          return callback.apply(this, args);\n        } else {\n          return this.then(function() {\n            return callback.apply(this, args);\n          });\n        }\n      };\n    }\n\n    Test.Promise = function() {\n      RSVP.Promise.apply(this, arguments);\n      Test.lastPromise = this;\n    };\n\n    Test.Promise.prototype = create(RSVP.Promise.prototype);\n    Test.Promise.prototype.constructor = Test.Promise;\n\n    // Patch `then` to isolate async methods\n    // specifically `Ember.Test.lastPromise`\n    var originalThen = RSVP.Promise.prototype.then;\n    Test.Promise.prototype.then = function(onSuccess, onFailure) {\n      return originalThen.call(this, function(val) {\n        return isolate(onSuccess, val);\n      }, onFailure);\n    };\n\n    // This method isolates nested async methods\n    // so that they don't conflict with other last promises.\n    //\n    // 1. Set `Ember.Test.lastPromise` to null\n    // 2. Invoke method\n    // 3. Return the last promise created during method\n    // 4. Restore `Ember.Test.lastPromise` to original value\n    function isolate(fn, val) {\n      var value, lastPromise;\n\n      // Reset lastPromise for nested helpers\n      Test.lastPromise = null;\n\n      value = fn(val);\n\n      lastPromise = Test.lastPromise;\n\n      // If the method returned a promise\n      // return that promise. If not,\n      // return the last async helper's promise\n      if ((value && (value instanceof Test.Promise)) || !lastPromise) {\n        return value;\n      } else {\n        run(function() {\n          lastPromise = Test.resolve(lastPromise).then(function() {\n            return value;\n          });\n        });\n        return lastPromise;\n      }\n    }\n\n    __exports__[\"default\"] = Test;\n  });\nrequireModule(\"ember-testing\");\n\n})();","/*! blanket - v1.1.5 */\n\nif (typeof QUnit !== 'undefined'){ QUnit.config.autostart = false; }\n(function(define){\n/*\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowErrorTolerant: true,\nthrowError: true, generateStatement: true, peek: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseUnaryExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        FnExprTokens,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        SyntaxTreeDelegate,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        delegate,\n        lookahead,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        RegularExpression: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n    TokenName[Token.RegularExpression] = 'RegularExpression';\n\n    // A function following one of those tokens is an expression.\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n                    'return', 'case', 'delete', 'throw', 'void',\n                    // assignment operators\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n                    '&=', '|=', '^=', ',',\n                    // binary/unary operators\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n                    '<=', '<', '>', '!=', '!=='];\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        // 'const' is specialized as Keyword in V8.\n        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.\n        // Some others are from future reserved words.\n\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\n                (id === 'try') || (id === 'let');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    // 7.4 Comments\n\n    function addComment(type, value, start, end, loc) {\n        var comment, attacher;\n\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (state.lastCommentStart >= start) {\n            return;\n        }\n        state.lastCommentStart = start;\n\n        comment = {\n            type: type,\n            value: value\n        };\n        if (extra.range) {\n            comment.range = [start, end];\n        }\n        if (extra.loc) {\n            comment.loc = loc;\n        }\n        extra.comments.push(comment);\n        if (extra.attachComment) {\n            extra.leadingComments.push(comment);\n            extra.trailingComments.push(comment);\n        }\n    }\n\n    function skipSingleLineComment(offset) {\n        var start, loc, ch, comment;\n\n        start = index - offset;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart - offset\n            }\n        };\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            ++index;\n            if (isLineTerminator(ch)) {\n                if (extra.comments) {\n                    comment = source.slice(start + offset, index - 1);\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    addComment('Line', comment, start, index - 1, loc);\n                }\n                if (ch === 13 && source.charCodeAt(index) === 10) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                return;\n            }\n        }\n\n        if (extra.comments) {\n            comment = source.slice(start + offset, index);\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            addComment('Line', comment, start, index, loc);\n        }\n    }\n\n    function skipMultiLineComment() {\n        var start, loc, ch, comment;\n\n        if (extra.comments) {\n            start = index - 2;\n            loc = {\n                start: {\n                    line: lineNumber,\n                    column: index - lineStart - 2\n                }\n            };\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (isLineTerminator(ch)) {\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                ++index;\n                lineStart = index;\n                if (index >= length) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else if (ch === 0x2A) {\n                // Block comment ends with '*/'.\n                if (source.charCodeAt(index + 1) === 0x2F) {\n                    ++index;\n                    ++index;\n                    if (extra.comments) {\n                        comment = source.slice(start + 2, index - 2);\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        addComment('Block', comment, start, index, loc);\n                    }\n                    return;\n                }\n                ++index;\n            } else {\n                ++index;\n            }\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function skipComment() {\n        var ch, start;\n\n        start = (index === 0);\n        while (index < length) {\n            ch = source.charCodeAt(index);\n\n            if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                start = true;\n            } else if (ch === 0x2F) { // U+002F is '/'\n                ch = source.charCodeAt(index + 1);\n                if (ch === 0x2F) {\n                    ++index;\n                    ++index;\n                    skipSingleLineComment(2);\n                    start = true;\n                } else if (ch === 0x2A) {  // U+002A is '*'\n                    ++index;\n                    ++index;\n                    skipMultiLineComment();\n                } else {\n                    break;\n                }\n            } else if (start && ch === 0x2D) { // U+002D is '-'\n                // U+003E is '>'\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\n                    // '-->' is a single-line comment\n                    index += 3;\n                    skipSingleLineComment(3);\n                } else {\n                    break;\n                }\n            } else if (ch === 0x3C) { // U+003C is '<'\n                if (source.slice(index + 1, index + 4) === '!--') {\n                    ++index; // `<`\n                    ++index; // `!`\n                    ++index; // `-`\n                    ++index; // `-`\n                    skipSingleLineComment(4);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function getEscapedIdentifier() {\n        var ch, id;\n\n        ch = source.charCodeAt(index++);\n        id = String.fromCharCode(ch);\n\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        if (ch === 0x5C) {\n            if (source.charCodeAt(index) !== 0x75) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            ++index;\n            ch = scanHexEscape('u');\n            if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            id = ch;\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            ++index;\n            id += String.fromCharCode(ch);\n\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (ch === 0x5C) {\n                id = id.substr(0, id.length - 1);\n                if (source.charCodeAt(index) !== 0x75) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                ++index;\n                ch = scanHexEscape('u');\n                if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                id += ch;\n            }\n        }\n\n        return id;\n    }\n\n    function getIdentifier() {\n        var start, ch;\n\n        start = index++;\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (ch === 0x5C) {\n                // Blackslash (U+005C) marks Unicode escape sequence.\n                index = start;\n                return getEscapedIdentifier();\n            }\n            if (isIdentifierPart(ch)) {\n                ++index;\n            } else {\n                break;\n            }\n        }\n\n        return source.slice(start, index);\n    }\n\n    function scanIdentifier() {\n        var start, id, type;\n\n        start = index;\n\n        // Backslash (U+005C) starts an escaped character.\n        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            type = Token.Identifier;\n        } else if (isKeyword(id)) {\n            type = Token.Keyword;\n        } else if (id === 'null') {\n            type = Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n            type = Token.BooleanLiteral;\n        } else {\n            type = Token.Identifier;\n        }\n\n        return {\n            type: type,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            code = source.charCodeAt(index),\n            code2,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        switch (code) {\n\n        // Check for most common single-character punctuators.\n        case 0x2E:  // . dot\n        case 0x28:  // ( open bracket\n        case 0x29:  // ) close bracket\n        case 0x3B:  // ; semicolon\n        case 0x2C:  // , comma\n        case 0x7B:  // { open curly brace\n        case 0x7D:  // } close curly brace\n        case 0x5B:  // [\n        case 0x5D:  // ]\n        case 0x3A:  // :\n        case 0x3F:  // ?\n        case 0x7E:  // ~\n            ++index;\n            if (extra.tokenize) {\n                if (code === 0x28) {\n                    extra.openParenToken = extra.tokens.length;\n                } else if (code === 0x7B) {\n                    extra.openCurlyToken = extra.tokens.length;\n                }\n            }\n            return {\n                type: Token.Punctuator,\n                value: String.fromCharCode(code),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n\n        default:\n            code2 = source.charCodeAt(index + 1);\n\n            // '=' (U+003D) marks an assignment or comparison operator.\n            if (code2 === 0x3D) {\n                switch (code) {\n                case 0x2B:  // +\n                case 0x2D:  // -\n                case 0x2F:  // /\n                case 0x3C:  // <\n                case 0x3E:  // >\n                case 0x5E:  // ^\n                case 0x7C:  // |\n                case 0x25:  // %\n                case 0x26:  // &\n                case 0x2A:  // *\n                    index += 2;\n                    return {\n                        type: Token.Punctuator,\n                        value: String.fromCharCode(code) + String.fromCharCode(code2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n\n                case 0x21: // !\n                case 0x3D: // =\n                    index += 2;\n\n                    // !== and ===\n                    if (source.charCodeAt(index) === 0x3D) {\n                        ++index;\n                    }\n                    return {\n                        type: Token.Punctuator,\n                        value: source.slice(start, index),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        start: start,\n                        end: index\n                    };\n                }\n            }\n        }\n\n        // 4-character punctuator: >>>=\n\n        ch4 = source.substr(index, 4);\n\n        if (ch4 === '>>>=') {\n            index += 4;\n            return {\n                type: Token.Punctuator,\n                value: ch4,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        ch3 = ch4.substr(0, 3);\n\n        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: ch3,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // Other 2-character punctuators: ++ -- << >> && ||\n        ch2 = ch3.substr(0, 2);\n\n        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: ch2,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        // 1-character punctuators: < > = ! + - * % & | ^ /\n        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanHexLiteral(start) {\n        var number = '';\n\n        while (index < length) {\n            if (!isHexDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanOctalLiteral(start) {\n        var number = '0' + source[index++];\n        while (index < length) {\n            if (!isOctalDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: true,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    ++index;\n                    return scanHexLiteral(start);\n                }\n                if (isOctalDigit(ch)) {\n                    return scanOctalLiteral(start);\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n            if (isDecimalDigit(source.charCodeAt(index))) {\n                while (isDecimalDigit(source.charCodeAt(index))) {\n                    number += source[index++];\n                }\n            } else {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            startLineNumber: startLineNumber,\n            startLineStart: startLineStart,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function testRegExp(pattern, flags) {\n        var value;\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n        return value;\n    }\n\n    function scanRegExpBody() {\n        var ch, str, classMarker, terminated, body;\n\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        classMarker = false;\n        terminated = false;\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        body = str.substr(1, str.length - 2);\n        return {\n            value: body,\n            literal: str\n        };\n    }\n\n    function scanRegExpFlags() {\n        var ch, str, flags, restore;\n\n        str = '';\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        for (str += '\\\\u'; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                } else {\n                    str += '\\\\';\n                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        return {\n            value: flags,\n            literal: str\n        };\n    }\n\n    function scanRegExp() {\n        var start, body, flags, pattern, value;\n\n        lookahead = null;\n        skipComment();\n        start = index;\n\n        body = scanRegExpBody();\n        flags = scanRegExpFlags();\n        value = testRegExp(body.value, flags.value);\n\n        if (extra.tokenize) {\n            return {\n                type: Token.RegularExpression,\n                value: value,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        return {\n            literal: body.literal + flags.literal,\n            value: value,\n            start: start,\n            end: index\n        };\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        /* istanbul ignore next */\n        if (!extra.tokenize) {\n            // Pop the previous token, which is likely '/' or '/='\n            if (extra.tokens.length > 0) {\n                token = extra.tokens[extra.tokens.length - 1];\n                if (token.range[0] === pos && token.type === 'Punctuator') {\n                    if (token.value === '/' || token.value === '/=') {\n                        extra.tokens.pop();\n                    }\n                }\n            }\n\n            extra.tokens.push({\n                type: 'RegularExpression',\n                value: regex.literal,\n                range: [pos, index],\n                loc: loc\n            });\n        }\n\n        return regex;\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advanceSlash() {\n        var prevToken,\n            checkToken;\n        // Using the following algorithm:\n        // https://github.com/mozilla/sweet.js/wiki/design\n        prevToken = extra.tokens[extra.tokens.length - 1];\n        if (!prevToken) {\n            // Nothing before that: it cannot be a division.\n            return collectRegex();\n        }\n        if (prevToken.type === 'Punctuator') {\n            if (prevToken.value === ']') {\n                return scanPunctuator();\n            }\n            if (prevToken.value === ')') {\n                checkToken = extra.tokens[extra.openParenToken - 1];\n                if (checkToken &&\n                        checkToken.type === 'Keyword' &&\n                        (checkToken.value === 'if' ||\n                         checkToken.value === 'while' ||\n                         checkToken.value === 'for' ||\n                         checkToken.value === 'with')) {\n                    return collectRegex();\n                }\n                return scanPunctuator();\n            }\n            if (prevToken.value === '}') {\n                // Dividing a function by anything makes little sense,\n                // but we have to check for that.\n                if (extra.tokens[extra.openCurlyToken - 3] &&\n                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {\n                    // Anonymous function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 4];\n                    if (!checkToken) {\n                        return scanPunctuator();\n                    }\n                } else if (extra.tokens[extra.openCurlyToken - 4] &&\n                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {\n                    // Named function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 5];\n                    if (!checkToken) {\n                        return collectRegex();\n                    }\n                } else {\n                    return scanPunctuator();\n                }\n                // checkToken determines whether the function is\n                // a declaration or an expression.\n                if (FnExprTokens.indexOf(checkToken.value) >= 0) {\n                    // It is an expression.\n                    return scanPunctuator();\n                }\n                // It is a declaration.\n                return collectRegex();\n            }\n            return collectRegex();\n        }\n        if (prevToken.type === 'Keyword') {\n            return collectRegex();\n        }\n        return scanPunctuator();\n    }\n\n    function advance() {\n        var ch;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: index,\n                end: index\n            };\n        }\n\n        ch = source.charCodeAt(index);\n\n        if (isIdentifierStart(ch)) {\n            return scanIdentifier();\n        }\n\n        // Very common: ( and ) and ;\n        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n            return scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (ch === 0x27 || ch === 0x22) {\n            return scanStringLiteral();\n        }\n\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (ch === 0x2E) {\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\n                return scanNumericLiteral();\n            }\n            return scanPunctuator();\n        }\n\n        if (isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        // Slash (/) U+002F can also start a regex.\n        if (extra.tokenize && ch === 0x2F) {\n            return advanceSlash();\n        }\n\n        return scanPunctuator();\n    }\n\n    function collectToken() {\n        var loc, token, range, value;\n\n        skipComment();\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            value = source.slice(token.start, token.end);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: [token.start, token.end],\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function lex() {\n        var token;\n\n        token = lookahead;\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n\n        index = token.end;\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        return token;\n    }\n\n    function peek() {\n        var pos, line, start;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n    }\n\n    function Position(line, column) {\n        this.line = line;\n        this.column = column;\n    }\n\n    function SourceLocation(startLine, startColumn, line, column) {\n        this.start = new Position(startLine, startColumn);\n        this.end = new Position(line, column);\n    }\n\n    SyntaxTreeDelegate = {\n\n        name: 'SyntaxTree',\n\n        processComment: function (node) {\n            var lastChild, trailingComments;\n\n            if (node.type === Syntax.Program) {\n                if (node.body.length > 0) {\n                    return;\n                }\n            }\n\n            if (extra.trailingComments.length > 0) {\n                if (extra.trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.trailingComments;\n                    extra.trailingComments = [];\n                } else {\n                    extra.trailingComments.length = 0;\n                }\n            } else {\n                if (extra.bottomRightStack.length > 0 &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&\n                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {\n                    trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                    delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;\n                }\n            }\n\n            // Eating the stack.\n            while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {\n                lastChild = extra.bottomRightStack.pop();\n            }\n\n            if (lastChild) {\n                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {\n                    node.leadingComments = lastChild.leadingComments;\n                    delete lastChild.leadingComments;\n                }\n            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {\n                node.leadingComments = extra.leadingComments;\n                extra.leadingComments = [];\n            }\n\n\n            if (trailingComments) {\n                node.trailingComments = trailingComments;\n            }\n\n            extra.bottomRightStack.push(node);\n        },\n\n        markEnd: function (node, startToken) {\n            if (extra.range) {\n                node.range = [startToken.start, index];\n            }\n            if (extra.loc) {\n                node.loc = new SourceLocation(\n                    startToken.startLineNumber === undefined ?  startToken.lineNumber : startToken.startLineNumber,\n                    startToken.start - (startToken.startLineStart === undefined ?  startToken.lineStart : startToken.startLineStart),\n                    lineNumber,\n                    index - lineStart\n                );\n                this.postProcess(node);\n            }\n\n            if (extra.attachComment) {\n                this.processComment(node);\n            }\n            return node;\n        },\n\n        postProcess: function (node) {\n            if (extra.source) {\n                node.loc.source = extra.source;\n            }\n            return node;\n        },\n\n        createArrayExpression: function (elements) {\n            return {\n                type: Syntax.ArrayExpression,\n                elements: elements\n            };\n        },\n\n        createAssignmentExpression: function (operator, left, right) {\n            return {\n                type: Syntax.AssignmentExpression,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBinaryExpression: function (operator, left, right) {\n            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :\n                        Syntax.BinaryExpression;\n            return {\n                type: type,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBlockStatement: function (body) {\n            return {\n                type: Syntax.BlockStatement,\n                body: body\n            };\n        },\n\n        createBreakStatement: function (label) {\n            return {\n                type: Syntax.BreakStatement,\n                label: label\n            };\n        },\n\n        createCallExpression: function (callee, args) {\n            return {\n                type: Syntax.CallExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createCatchClause: function (param, body) {\n            return {\n                type: Syntax.CatchClause,\n                param: param,\n                body: body\n            };\n        },\n\n        createConditionalExpression: function (test, consequent, alternate) {\n            return {\n                type: Syntax.ConditionalExpression,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createContinueStatement: function (label) {\n            return {\n                type: Syntax.ContinueStatement,\n                label: label\n            };\n        },\n\n        createDebuggerStatement: function () {\n            return {\n                type: Syntax.DebuggerStatement\n            };\n        },\n\n        createDoWhileStatement: function (body, test) {\n            return {\n                type: Syntax.DoWhileStatement,\n                body: body,\n                test: test\n            };\n        },\n\n        createEmptyStatement: function () {\n            return {\n                type: Syntax.EmptyStatement\n            };\n        },\n\n        createExpressionStatement: function (expression) {\n            return {\n                type: Syntax.ExpressionStatement,\n                expression: expression\n            };\n        },\n\n        createForStatement: function (init, test, update, body) {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        },\n\n        createForInStatement: function (left, right, body) {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        },\n\n        createFunctionDeclaration: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionDeclaration,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createFunctionExpression: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionExpression,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createIdentifier: function (name) {\n            return {\n                type: Syntax.Identifier,\n                name: name\n            };\n        },\n\n        createIfStatement: function (test, consequent, alternate) {\n            return {\n                type: Syntax.IfStatement,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createLabeledStatement: function (label, body) {\n            return {\n                type: Syntax.LabeledStatement,\n                label: label,\n                body: body\n            };\n        },\n\n        createLiteral: function (token) {\n            return {\n                type: Syntax.Literal,\n                value: token.value,\n                raw: source.slice(token.start, token.end)\n            };\n        },\n\n        createMemberExpression: function (accessor, object, property) {\n            return {\n                type: Syntax.MemberExpression,\n                computed: accessor === '[',\n                object: object,\n                property: property\n            };\n        },\n\n        createNewExpression: function (callee, args) {\n            return {\n                type: Syntax.NewExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createObjectExpression: function (properties) {\n            return {\n                type: Syntax.ObjectExpression,\n                properties: properties\n            };\n        },\n\n        createPostfixExpression: function (operator, argument) {\n            return {\n                type: Syntax.UpdateExpression,\n                operator: operator,\n                argument: argument,\n                prefix: false\n            };\n        },\n\n        createProgram: function (body) {\n            return {\n                type: Syntax.Program,\n                body: body\n            };\n        },\n\n        createProperty: function (kind, key, value) {\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: value,\n                kind: kind\n            };\n        },\n\n        createReturnStatement: function (argument) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: argument\n            };\n        },\n\n        createSequenceExpression: function (expressions) {\n            return {\n                type: Syntax.SequenceExpression,\n                expressions: expressions\n            };\n        },\n\n        createSwitchCase: function (test, consequent) {\n            return {\n                type: Syntax.SwitchCase,\n                test: test,\n                consequent: consequent\n            };\n        },\n\n        createSwitchStatement: function (discriminant, cases) {\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        },\n\n        createThisExpression: function () {\n            return {\n                type: Syntax.ThisExpression\n            };\n        },\n\n        createThrowStatement: function (argument) {\n            return {\n                type: Syntax.ThrowStatement,\n                argument: argument\n            };\n        },\n\n        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {\n            return {\n                type: Syntax.TryStatement,\n                block: block,\n                guardedHandlers: guardedHandlers,\n                handlers: handlers,\n                finalizer: finalizer\n            };\n        },\n\n        createUnaryExpression: function (operator, argument) {\n            if (operator === '++' || operator === '--') {\n                return {\n                    type: Syntax.UpdateExpression,\n                    operator: operator,\n                    argument: argument,\n                    prefix: true\n                };\n            }\n            return {\n                type: Syntax.UnaryExpression,\n                operator: operator,\n                argument: argument,\n                prefix: true\n            };\n        },\n\n        createVariableDeclaration: function (declarations, kind) {\n            return {\n                type: Syntax.VariableDeclaration,\n                declarations: declarations,\n                kind: kind\n            };\n        },\n\n        createVariableDeclarator: function (id, init) {\n            return {\n                type: Syntax.VariableDeclarator,\n                id: id,\n                init: init\n            };\n        },\n\n        createWhileStatement: function (test, body) {\n            return {\n                type: Syntax.WhileStatement,\n                test: test,\n                body: body\n            };\n        },\n\n        createWithStatement: function (object, body) {\n            return {\n                type: Syntax.WithStatement,\n                object: object,\n                body: body\n            };\n        }\n    };\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    assert(index < args.length, 'Message reference must be in range');\n                    return args[index];\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.start;\n            error.lineNumber = token.lineNumber;\n            error.column = token.start - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        error.description = msg;\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var op;\n\n        if (lookahead.type !== Token.Punctuator) {\n            return false;\n        }\n        op = lookahead.value;\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var line;\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B || match(';')) {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (lookahead.type !== Token.EOF && !match('}')) {\n            throwUnexpected(lookahead);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [], startToken;\n\n        startToken = lookahead;\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        lex();\n\n        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body, startToken;\n\n        previousStrict = strict;\n        startToken = lookahead;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);\n    }\n\n    function parseObjectPropertyKey() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return delegate.markEnd(delegate.createLiteral(token), startToken);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, value, param, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                value = parsePropertyFunction([]);\n                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);\n            }\n            if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead;\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    value = parsePropertyFunction([]);\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    value = parsePropertyFunction(param, token);\n                }\n                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);\n            }\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);\n        }\n        if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, key, kind, map = {}, toString = String, startToken;\n\n        startToken = lookahead;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n\n            key = '$' + name;\n            if (Object.prototype.hasOwnProperty.call(map, key)) {\n                if (map[key] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[key] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[key] |= kind;\n            } else {\n                map[key] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var type, token, expr, startToken;\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        type = lookahead.type;\n        startToken = lookahead;\n\n        if (type === Token.Identifier) {\n            expr =  delegate.createIdentifier(lex().value);\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && lookahead.octal) {\n                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);\n            }\n            expr = delegate.createLiteral(lex());\n        } else if (type === Token.Keyword) {\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n            if (matchKeyword('this')) {\n                lex();\n                expr = delegate.createThisExpression();\n            } else {\n                throwUnexpected(lex());\n            }\n        } else if (type === Token.BooleanLiteral) {\n            token = lex();\n            token.value = (token.value === 'true');\n            expr = delegate.createLiteral(token);\n        } else if (type === Token.NullLiteral) {\n            token = lex();\n            token.value = null;\n            expr = delegate.createLiteral(token);\n        } else if (match('/') || match('/=')) {\n            if (typeof extra.tokens !== 'undefined') {\n                expr = delegate.createLiteral(collectRegex());\n            } else {\n                expr = delegate.createLiteral(scanRegExp());\n            }\n            peek();\n        } else {\n            throwUnexpected(lex());\n        }\n\n        return delegate.markEnd(expr, startToken);\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var callee, args, startToken;\n\n        startToken = lookahead;\n        expectKeyword('new');\n        callee = parseLeftHandSideExpression();\n        args = match('(') ? parseArguments() : [];\n\n        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var previousAllowIn, expr, args, property, startToken;\n\n        startToken = lookahead;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n        state.allowIn = previousAllowIn;\n\n        for (;;) {\n            if (match('.')) {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            } else if (match('(')) {\n                args = parseArguments();\n                expr = delegate.createCallExpression(expr, args);\n            } else if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                break;\n            }\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var previousAllowIn, expr, property, startToken;\n\n        startToken = lookahead;\n\n        previousAllowIn = state.allowIn;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n        state.allowIn = previousAllowIn;\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            }\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr, token, startToken = lookahead;\n\n        expr = parseLeftHandSideExpressionAllowCall();\n\n        if (lookahead.type === Token.Punctuator) {\n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n\n                if (!isLeftHandSide(expr)) {\n                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n                }\n\n                token = lex();\n                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr, startToken;\n\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\n            expr = parsePostfixExpression();\n        } else if (match('++') || match('--')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (match('+') || match('-') || match('~') || match('!')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            startToken = lookahead;\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            expr = delegate.markEnd(expr, startToken);\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n        } else {\n            expr = parsePostfixExpression();\n        }\n\n        return expr;\n    }\n\n    function binaryPrecedence(token, allowIn) {\n        var prec = 0;\n\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return 0;\n        }\n\n        switch (token.value) {\n        case '||':\n            prec = 1;\n            break;\n\n        case '&&':\n            prec = 2;\n            break;\n\n        case '|':\n            prec = 3;\n            break;\n\n        case '^':\n            prec = 4;\n            break;\n\n        case '&':\n            prec = 5;\n            break;\n\n        case '==':\n        case '!=':\n        case '===':\n        case '!==':\n            prec = 6;\n            break;\n\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n        case 'instanceof':\n            prec = 7;\n            break;\n\n        case 'in':\n            prec = allowIn ? 7 : 0;\n            break;\n\n        case '<<':\n        case '>>':\n        case '>>>':\n            prec = 8;\n            break;\n\n        case '+':\n        case '-':\n            prec = 9;\n            break;\n\n        case '*':\n        case '/':\n        case '%':\n            prec = 11;\n            break;\n\n        default:\n            break;\n        }\n\n        return prec;\n    }\n\n    // 11.5 Multiplicative Operators\n    // 11.6 Additive Operators\n    // 11.7 Bitwise Shift Operators\n    // 11.8 Relational Operators\n    // 11.9 Equality Operators\n    // 11.10 Binary Bitwise Operators\n    // 11.11 Binary Logical Operators\n\n    function parseBinaryExpression() {\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n        marker = lookahead;\n        left = parseUnaryExpression();\n\n        token = lookahead;\n        prec = binaryPrecedence(token, state.allowIn);\n        if (prec === 0) {\n            return left;\n        }\n        token.prec = prec;\n        lex();\n\n        markers = [marker, lookahead];\n        right = parseUnaryExpression();\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\n\n            // Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                expr = delegate.createBinaryExpression(operator, left, right);\n                markers.pop();\n                marker = markers[markers.length - 1];\n                delegate.markEnd(expr, marker);\n                stack.push(expr);\n            }\n\n            // Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(lookahead);\n            expr = parseUnaryExpression();\n            stack.push(expr);\n        }\n\n        // Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        markers.pop();\n        while (i > 1) {\n            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n            marker = markers.pop();\n            delegate.markEnd(expr, marker);\n        }\n\n        return expr;\n    }\n\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent, alternate, startToken;\n\n        startToken = lookahead;\n\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n            alternate = parseAssignmentExpression();\n\n            expr = delegate.createConditionalExpression(expr, consequent, alternate);\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, left, right, node, startToken;\n\n        token = lookahead;\n        startToken = lookahead;\n\n        node = left = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(left)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            token = lex();\n            right = parseAssignmentExpression();\n            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);\n        }\n\n        return node;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr, startToken = lookahead;\n\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n            delegate.markEnd(expr, startToken);\n        }\n\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createBlockStatement(block), startToken);\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token, startToken;\n\n        startToken = lookahead;\n        token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);\n    }\n\n    function parseVariableDeclaration(kind) {\n        var init = null, id, startToken;\n\n        startToken = lookahead;\n        id = parseVariableIdentifier();\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return delegate.createVariableDeclaration(declarations, 'var');\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n        return delegate.createEmptyStatement();\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n        consumeSemicolon();\n        return delegate.createExpressionStatement(expr);\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return delegate.createIfStatement(test, consequent, alternate);\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return delegate.createDoWhileStatement(body, test);\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return delegate.createWhileStatement(test, body);\n    }\n\n    function parseForVariableDeclaration() {\n        var token, declarations, startToken;\n\n        startToken = lookahead;\n        token = lex();\n        declarations = parseVariableDeclarationList();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return (typeof left === 'undefined') ?\n                delegate.createForStatement(init, test, update, body) :\n                delegate.createForInStatement(left, right, body);\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var label = null, key;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return delegate.createContinueStatement(label);\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var label = null, key;\n\n        expectKeyword('break');\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return delegate.createBreakStatement(label);\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source.charCodeAt(index) === 0x20) {\n            if (isIdentifierStart(source.charCodeAt(index + 1))) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return delegate.createReturnStatement(argument);\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return delegate.createReturnStatement(null);\n        }\n\n        if (!match(';')) {\n            if (!match('}') && lookahead.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return delegate.createReturnStatement(argument);\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            // TODO(ikarienator): Should we update the test cases instead?\n            skipComment();\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return delegate.createWithStatement(object, body);\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test, consequent = [], statement, startToken;\n\n        startToken = lookahead;\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            consequent.push(statement);\n        }\n\n        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return delegate.createSwitchStatement(discriminant, cases);\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return delegate.createSwitchStatement(discriminant, cases);\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return delegate.createThrowStatement(argument);\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param, body, startToken;\n\n        startToken = lookahead;\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead);\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n        body = parseBlock();\n        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return delegate.createTryStatement(block, [], handlers, finalizer);\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return delegate.createDebuggerStatement();\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var type = lookahead.type,\n            expr,\n            labeledBody,\n            key,\n            startToken;\n\n        if (type === Token.EOF) {\n            throwUnexpected(lookahead);\n        }\n\n        if (type === Token.Punctuator && lookahead.value === '{') {\n            return parseBlock();\n        }\n\n        startToken = lookahead;\n\n        if (type === Token.Punctuator) {\n            switch (lookahead.value) {\n            case ';':\n                return delegate.markEnd(parseEmptyStatement(), startToken);\n            case '(':\n                return delegate.markEnd(parseExpressionStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        if (type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'break':\n                return delegate.markEnd(parseBreakStatement(), startToken);\n            case 'continue':\n                return delegate.markEnd(parseContinueStatement(), startToken);\n            case 'debugger':\n                return delegate.markEnd(parseDebuggerStatement(), startToken);\n            case 'do':\n                return delegate.markEnd(parseDoWhileStatement(), startToken);\n            case 'for':\n                return delegate.markEnd(parseForStatement(), startToken);\n            case 'function':\n                return delegate.markEnd(parseFunctionDeclaration(), startToken);\n            case 'if':\n                return delegate.markEnd(parseIfStatement(), startToken);\n            case 'return':\n                return delegate.markEnd(parseReturnStatement(), startToken);\n            case 'switch':\n                return delegate.markEnd(parseSwitchStatement(), startToken);\n            case 'throw':\n                return delegate.markEnd(parseThrowStatement(), startToken);\n            case 'try':\n                return delegate.markEnd(parseTryStatement(), startToken);\n            case 'var':\n                return delegate.markEnd(parseVariableStatement(), startToken);\n            case 'while':\n                return delegate.markEnd(parseWhileStatement(), startToken);\n            case 'with':\n                return delegate.markEnd(parseWithStatement(), startToken);\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            key = '$' + expr.name;\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[key] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[key];\n            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);\n        }\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;\n\n        startToken = lookahead;\n        expect('{');\n\n        while (index < length) {\n            if (lookahead.type !== Token.StringLiteral) {\n                break;\n            }\n            token = lookahead;\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);\n    }\n\n    function parseParams(firstRestricted) {\n        var param, params = [], token, stricted, paramSet, key, message;\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead;\n                param = parseVariableIdentifier();\n                key = '$' + token.value;\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[key] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return {\n            params: params,\n            stricted: stricted,\n            firstRestricted: firstRestricted,\n            message: message\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;\n\n        startToken = lookahead;\n\n        expectKeyword('function');\n        token = lookahead;\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;\n\n        startToken = lookahead;\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead;\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        if (lookahead.type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(lookahead.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (lookahead.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead;\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            /* istanbul ignore if */\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var body, startToken;\n\n        skipComment();\n        peek();\n        startToken = lookahead;\n        strict = false;\n\n        body = parseSourceElements();\n        return delegate.markEnd(delegate.createProgram(body), startToken);\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function tokenize(code, options) {\n        var toString,\n            token,\n            tokens;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n\n        // Options matching.\n        options = options || {};\n\n        // Of course we collect tokens here.\n        options.tokens = true;\n        extra.tokens = [];\n        extra.tokenize = true;\n        // The following two fields are necessary to compute the Regex tokens.\n        extra.openParenToken = -1;\n        extra.openCurlyToken = -1;\n\n        extra.range = (typeof options.range === 'boolean') && options.range;\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\n\n        if (typeof options.comment === 'boolean' && options.comment) {\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\n            extra.errors = [];\n        }\n\n        try {\n            peek();\n            if (lookahead.type === Token.EOF) {\n                return extra.tokens;\n            }\n\n            token = lex();\n            while (lookahead.type !== Token.EOF) {\n                try {\n                    token = lex();\n                } catch (lexError) {\n                    token = lookahead;\n                    if (extra.errors) {\n                        extra.errors.push(lexError);\n                        // We have to break on the first error\n                        // to avoid infinite loops.\n                        break;\n                    } else {\n                        throw lexError;\n                    }\n                }\n            }\n\n            filterTokenLocation();\n            tokens = extra.tokens;\n            if (typeof extra.comments !== 'undefined') {\n                tokens.comments = extra.comments;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                tokens.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n        return tokens;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\n\n            if (extra.loc && options.source !== null && options.source !== undefined) {\n                extra.source = toString(options.source);\n            }\n\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n            if (extra.attachComment) {\n                extra.range = true;\n                extra.comments = [];\n                extra.bottomRightStack = [];\n                extra.trailingComments = [];\n                extra.leadingComments = [];\n            }\n        }\n\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with *.json manifests.\n    exports.version = '1.2.2';\n\n    exports.tokenize = tokenize;\n\n    exports.parse = parse;\n\n    // Deep copy.\n   /* istanbul ignore next */\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n})(null);\n/*!\n * falafel (c) James Halliday / MIT License\n * https://github.com/substack/node-falafel\n */\n\n(function(require,module){\nvar parse = require('esprima').parse;\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    return keys;\n};\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn);\n    for (var i = 0; i < xs.length; i++) {\n        fn.call(xs, xs[i], i, xs);\n    }\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nmodule.exports = function (src, opts, fn) {\n    if (typeof opts === 'function') {\n        fn = opts;\n        opts = {};\n    }\n    if (typeof src === 'object') {\n        opts = src;\n        src = opts.source;\n        delete opts.source;\n    }\n    src = src === undefined ? opts.source : src;\n    opts.range = true;\n    if (typeof src !== 'string') src = String(src);\n    \n    var ast = parse(src, opts);\n    \n    var result = {\n        chunks : src.split(''),\n        toString : function () { return result.chunks.join('') },\n        inspect : function () { return result.toString() }\n    };\n    var index = 0;\n    \n    (function walk (node, parent) {\n        insertHelpers(node, parent, result.chunks);\n        \n        forEach(objectKeys(node), function (key) {\n            if (key === 'parent') return;\n            \n            var child = node[key];\n            if (isArray(child)) {\n                forEach(child, function (c) {\n                    if (c && typeof c.type === 'string') {\n                        walk(c, node);\n                    }\n                });\n            }\n            else if (child && typeof child.type === 'string') {\n                insertHelpers(child, node, result.chunks);\n                walk(child, node);\n            }\n        });\n        fn(node);\n    })(ast, undefined);\n    \n    return result;\n};\n \nfunction insertHelpers (node, parent, chunks) {\n    if (!node.range) return;\n    \n    node.parent = parent;\n    \n    node.source = function () {\n        return chunks.slice(\n            node.range[0], node.range[1]\n        ).join('');\n    };\n    \n    if (node.update && typeof node.update === 'object') {\n        var prev = node.update;\n        forEach(objectKeys(prev), function (key) {\n            update[key] = prev[key];\n        });\n        node.update = update;\n    }\n    else {\n        node.update = update;\n    }\n    \n    function update (s) {\n        chunks[node.range[0]] = s;\n        for (var i = node.range[0] + 1; i < node.range[1]; i++) {\n            chunks[i] = '';\n        }\n    };\n}\n\nwindow.falafel = module.exports;})(function(){return {parse: esprima.parse};},{exports: {}});\nvar inBrowser = typeof window !== 'undefined' && this === window;\nvar parseAndModify = (inBrowser ? window.falafel : require(\"falafel\"));\n\n(inBrowser ? window : exports).blanket = (function(){\n    var linesToAddTracking = [\n        \"ExpressionStatement\",\n        \"BreakStatement\"   ,\n        \"ContinueStatement\" ,\n        \"VariableDeclaration\",\n        \"ReturnStatement\"   ,\n        \"ThrowStatement\"   ,\n        \"TryStatement\"     ,\n        \"FunctionDeclaration\"    ,\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"   ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"SwitchStatement\"  ,\n        \"WithStatement\"\n    ],\n    linesToAddBrackets = [\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"     ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"WithStatement\"\n    ],\n    __blanket,\n    copynumber = Math.floor(Math.random()*1000),\n    coverageInfo = {},options = {\n        reporter: null,\n        adapter:null,\n        filter: null,\n        customVariable: null,\n        loader: null,\n        ignoreScriptError: false,\n        existingRequireJS:false,\n        autoStart: false,\n        timeout: 180,\n        ignoreCors: false,\n        branchTracking: false,\n        sourceURL: false,\n        debug:false,\n        engineOnly:false,\n        testReadyCallback:null,\n        commonJS:false,\n        instrumentCache:false,\n        modulePattern: null\n    };\n    \n    if (inBrowser && typeof window.blanket !== 'undefined'){\n        __blanket = window.blanket.noConflict();\n    }\n    \n    _blanket = {\n        noConflict: function(){\n            if (__blanket){\n                return __blanket;\n            }\n            return _blanket;\n        },\n        _getCopyNumber: function(){\n            //internal method\n            //for differentiating between instances\n            return copynumber;\n        },\n        extend: function(obj) {\n            //borrowed from underscore\n            _blanket._extend(_blanket,obj);\n        },\n        _extend: function(dest,source){\n          if (source) {\n            for (var prop in source) {\n              if ( dest[prop] instanceof Object && typeof dest[prop] !== \"function\"){\n                _blanket._extend(dest[prop],source[prop]);\n              }else{\n                  dest[prop] = source[prop];\n              }\n            }\n          }\n        },\n        getCovVar: function(){\n            var opt = _blanket.options(\"customVariable\");\n            if (opt){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Using custom tracking variable:\",opt);}\n                return inBrowser ? \"window.\"+opt : opt;\n            }\n            return inBrowser ?   \"window._$blanket\" : \"_$jscoverage\";\n        },\n        options: function(key,value){\n            if (typeof key !== \"string\"){\n                _blanket._extend(options,key);\n            }else if (typeof value === 'undefined'){\n                return options[key];\n            }else{\n                options[key]=value;\n            }\n        },\n        instrument: function(config, next){\n            //check instrumented hash table,\n            //return instrumented code if available.\n            var inFile = config.inputFile,\n                inFileName = config.inputFileName;\n            //check instrument cache\n           if (_blanket.options(\"instrumentCache\") && sessionStorage && sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reading instrumentation from cache: \",inFileName);}\n                next(sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName));\n            }else{\n                var sourceArray = _blanket._prepareSource(inFile);\n                _blanket._trackingArraySetup=[];\n                //remove shebang\n                inFile = inFile.replace(/^\\#\\!.*/, \"\");\n                var instrumented =  parseAndModify(inFile,{loc:true,comment:true}, _blanket._addTracking(inFileName));\n                instrumented = _blanket._trackingSetup(inFileName,sourceArray)+instrumented;\n                if (_blanket.options(\"sourceURL\")){\n                    instrumented += \"\\n//@ sourceURL=\"+inFileName.replace(\"http://\",\"\");\n                }\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Instrumented file: \",inFileName);}\n                if (_blanket.options(\"instrumentCache\") && sessionStorage){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Saving instrumentation to cache: \",inFileName);}\n                    sessionStorage.setItem(\"blanket_instrument_store-\"+inFileName,instrumented);\n                }\n                next(instrumented);\n            }\n        },\n        _trackingArraySetup: [],\n        _branchingArraySetup: [],\n        _prepareSource: function(source){\n            return source.replace(/\\\\/g,\"\\\\\\\\\").replace(/'/g,\"\\\\'\").replace(/(\\r\\n|\\n|\\r)/gm,\"\\n\").split('\\n');\n        },\n        _trackingSetup: function(filename,sourceArray){\n            var branches = _blanket.options(\"branchTracking\");\n            var sourceString = sourceArray.join(\"',\\n'\");\n            var intro = \"\";\n            var covVar = _blanket.getCovVar();\n\n            intro += \"if (typeof \"+covVar+\" === 'undefined') \"+covVar+\" = {};\\n\";\n            if (branches){\n                intro += \"var _$branchFcn=function(f,l,c,r){ \";\n                intro += \"if (!!r) { \";\n                intro += covVar+\"[f].branchData[l][c][0] = \"+covVar+\"[f].branchData[l][c][0] || [];\";\n                intro += covVar+\"[f].branchData[l][c][0].push(r); }\";\n                intro += \"else { \";\n                intro += covVar+\"[f].branchData[l][c][1] = \"+covVar+\"[f].branchData[l][c][1] || [];\";\n                intro += covVar+\"[f].branchData[l][c][1].push(r); }\";\n                intro += \"return r;};\\n\";\n            }\n            intro += \"if (typeof \"+covVar+\"['\"+filename+\"'] === 'undefined'){\";\n\n            intro += covVar+\"['\"+filename+\"']=[];\\n\";\n            if (branches){\n                intro += covVar+\"['\"+filename+\"'].branchData=[];\\n\";\n            }\n            intro += covVar+\"['\"+filename+\"'].source=['\"+sourceString+\"'];\\n\";\n            //initialize array values\n            _blanket._trackingArraySetup.sort(function(a,b){\n                return parseInt(a,10) > parseInt(b,10);\n            }).forEach(function(item){\n                intro += covVar+\"['\"+filename+\"'][\"+item+\"]=0;\\n\";\n            });\n            if (branches){\n                _blanket._branchingArraySetup.sort(function(a,b){\n                    return a.line > b.line;\n                }).sort(function(a,b){\n                    return a.column > b.column;\n                }).forEach(function(item){\n                    if (item.file === filename){\n                        intro += \"if (typeof \"+ covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"] === 'undefined'){\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"]=[];\\n\";\n                        intro += \"}\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"] = [];\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].consequent = \"+JSON.stringify(item.consequent)+\";\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].alternate = \"+JSON.stringify(item.alternate)+\";\\n\";\n                    }\n                });\n            }\n            intro += \"}\";\n\n            return intro;\n        },\n        _blockifyIf: function(node){\n            if (linesToAddBrackets.indexOf(node.type) > -1){\n                var bracketsExistObject = node.consequent || node.body;\n                var bracketsExistAlt = node.alternate;\n                if( bracketsExistAlt && bracketsExistAlt.type !== \"BlockStatement\") {\n                    bracketsExistAlt.update(\"{\\n\"+bracketsExistAlt.source()+\"}\\n\");\n                }\n                if( bracketsExistObject && bracketsExistObject.type !== \"BlockStatement\") {\n                    bracketsExistObject.update(\"{\\n\"+bracketsExistObject.source()+\"}\\n\");\n                }\n            }\n        },\n        _trackBranch: function(node,filename){\n            //recursive on consequent and alternative\n            var line = node.loc.start.line;\n            var col = node.loc.start.column;\n\n            _blanket._branchingArraySetup.push({\n                line: line,\n                column: col,\n                file:filename,\n                consequent: node.consequent.loc,\n                alternate: node.alternate.loc\n            });\n\n            var updated = \"_$branchFcn\"+\n                          \"('\"+filename+\"',\"+line+\",\"+col+\",\"+node.test.source()+\n                          \")?\"+node.consequent.source()+\":\"+node.alternate.source();\n            node.update(updated);\n        },\n        _addTracking: function (filename) {\n            //falafel doesn't take a file name\n            //so we include the filename in a closure\n            //and return the function to falafel\n            var covVar = _blanket.getCovVar();\n\n            return function(node){\n                _blanket._blockifyIf(node);\n\n                if (linesToAddTracking.indexOf(node.type) > -1 && node.parent.type !== \"LabeledStatement\") {\n                    _blanket._checkDefs(node,filename);\n                    if (node.type === \"VariableDeclaration\" &&\n                        (node.parent.type === \"ForStatement\" || node.parent.type === \"ForInStatement\")){\n                        return;\n                    }\n                    if (node.loc && node.loc.start){\n                        node.update(covVar+\"['\"+filename+\"'][\"+node.loc.start.line+\"]++;\\n\"+node.source());\n                        _blanket._trackingArraySetup.push(node.loc.start.line);\n                    }else{\n                        //I don't think we can handle a node with no location\n                        throw new Error(\"The instrumenter encountered a node with no location: \"+Object.keys(node));\n                    }\n                }else if (_blanket.options(\"branchTracking\") && node.type === \"ConditionalExpression\"){\n                    _blanket._trackBranch(node,filename);\n                }\n            };\n        },\n        _checkDefs: function(node,filename){\n            // Make sure developers don't redefine window. if they do, inform them it is wrong.\n            if (inBrowser){\n                if (node.type === \"VariableDeclaration\" && node.declarations) {\n                    node.declarations.forEach(function(declaration) {\n                        if (declaration.id.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                if (node.type === \"FunctionDeclaration\" && node.params) {\n                    node.params.forEach(function(param) {\n                        if (param.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                //Make sure developers don't redefine the coverage variable\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    node.expression.left.object && node.expression.left.property &&\n                    node.expression.left.object.name +\n                        \".\" + node.expression.left.property.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }else{\n                //Make sure developers don't redefine the coverage variable in node\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    !node.expression.left.object && !node.expression.left.property &&\n                    node.expression.left.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }\n        },\n        setupCoverage: function(){\n            coverageInfo.instrumentation = \"blanket\";\n            coverageInfo.stats = {\n                \"suites\": 0,\n                \"tests\": 0,\n                \"passes\": 0,\n                \"pending\": 0,\n                \"failures\": 0,\n                \"start\": new Date()\n            };\n        },\n        _checkIfSetup: function(){\n            if (!coverageInfo.stats){\n                throw new Error(\"You must call blanket.setupCoverage() first.\");\n            }\n        },\n        onTestStart: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event started\");}\n            this._checkIfSetup();\n            coverageInfo.stats.tests++;\n            coverageInfo.stats.pending++;\n        },\n        onTestDone: function(total,passed){\n            this._checkIfSetup();\n            if(passed === total){\n                coverageInfo.stats.passes++;\n            }else{\n                coverageInfo.stats.failures++;\n            }\n            coverageInfo.stats.pending--;\n        },\n        onModuleStart: function(){\n            this._checkIfSetup();\n            coverageInfo.stats.suites++;\n        },\n        onTestsDone: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event done\");}\n            this._checkIfSetup();\n            coverageInfo.stats.end = new Date();\n\n            if (inBrowser){\n                this.report(coverageInfo);\n            }else{\n                if (!_blanket.options(\"branchTracking\")){\n                    delete (inBrowser ? window : global)[_blanket.getCovVar()].branchFcn;\n                }\n                this.options(\"reporter\").call(this,coverageInfo);\n            }\n        }\n    };\n    return _blanket;\n})();\n\n(function(_blanket){\n    var oldOptions = _blanket.options;\n_blanket.extend({\n    outstandingRequireFiles:[],\n    options: function(key,value){\n        var newVal={};\n\n        if (typeof key !== \"string\"){\n            //key is key/value map\n            oldOptions(key);\n            newVal = key;\n        }else if (typeof value === 'undefined'){\n            //accessor\n            return oldOptions(key);\n        }else{\n            //setter\n            oldOptions(key,value);\n            newVal[key] = value;\n        }\n\n        if (newVal.adapter){\n            _blanket._loadFile(newVal.adapter);\n        }\n        if (newVal.loader){\n            _blanket._loadFile(newVal.loader);\n        }\n    },\n    requiringFile: function(filename,done){\n        if (typeof filename === \"undefined\"){\n            _blanket.outstandingRequireFiles=[];\n        }else if (typeof done === \"undefined\"){\n            _blanket.outstandingRequireFiles.push(filename);\n        }else{\n            _blanket.outstandingRequireFiles.splice(_blanket.outstandingRequireFiles.indexOf(filename),1);\n        }\n    },\n    requireFilesLoaded: function(){\n        return _blanket.outstandingRequireFiles.length === 0;\n    },\n    showManualLoader: function(){\n        if (document.getElementById(\"blanketLoaderDialog\")){\n            return;\n        }\n        //copied from http://blog.avtex.com/2012/01/26/cross-browser-css-only-modal-box/\n        var loader = \"<div class='blanketDialogOverlay'>\";\n            loader += \"&nbsp;</div>\";\n            loader += \"<div class='blanketDialogVerticalOffset'>\";\n            loader += \"<div class='blanketDialogBox'>\";\n            loader += \"<b>Error:</b> Blanket.js encountered a cross origin request error while instrumenting the source files.  \";\n            loader += \"<br><br>This is likely caused by the source files being referenced locally (using the file:// protocol). \";\n            loader += \"<br><br>Some solutions include <a href='http://askubuntu.com/questions/160245/making-google-chrome-option-allow-file-access-from-files-permanent' target='_blank'>starting Chrome with special flags</a>, <a target='_blank' href='https://github.com/remy/servedir'>running a server locally</a>, or using a browser without these CORS restrictions (Safari).\";\n            loader += \"<br>\";\n            if (typeof FileReader !== \"undefined\"){\n                loader += \"<br>Or, try the experimental loader.  When prompted, simply click on the directory containing all the source files you want covered.\";\n                loader += \"<a href='javascript:document.getElementById(\\\"fileInput\\\").click();'>Start Loader</a>\";\n                loader += \"<input type='file' type='application/x-javascript' accept='application/x-javascript' webkitdirectory id='fileInput' multiple onchange='window.blanket.manualFileLoader(this.files)' style='visibility:hidden;position:absolute;top:-50;left:-50'/>\";\n            }\n            loader += \"<br><span style='float:right;cursor:pointer;'  onclick=document.getElementById('blanketLoaderDialog').style.display='none';>Close</span>\";\n            loader += \"<div style='clear:both'></div>\";\n            loader += \"</div></div>\";\n\n        var css = \".blanketDialogWrapper {\";\n            css += \"display:block;\";\n            css += \"position:fixed;\";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogOverlay {\";\n            css += \"position:fixed;\";\n            css += \"width:100%;\";\n            css += \"height:100%;\";\n            css += \"background-color:black;\";\n            css += \"opacity:.5; \";\n            css += \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=50)'; \";\n            css += \"filter:alpha(opacity=50); \";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogVerticalOffset { \";\n            css += \"position:fixed;\";\n            css += \"top:30%;\";\n            css += \"width:100%;\";\n            css += \"z-index:40002; }\";\n\n            css += \".blanketDialogBox { \";\n            css += \"width:405px; \";\n            css += \"position:relative;\";\n            css += \"margin:0 auto;\";\n            css += \"background-color:white;\";\n            css += \"padding:10px;\";\n            css += \"border:1px solid black; }\";\n\n        var dom = document.createElement(\"style\");\n        dom.innerHTML = css;\n        document.head.appendChild(dom);\n\n        var div = document.createElement(\"div\");\n        div.id = \"blanketLoaderDialog\";\n        div.className = \"blanketDialogWrapper\";\n        div.innerHTML = loader;\n        document.body.insertBefore(div,document.body.firstChild);\n\n    },\n    manualFileLoader: function(files){\n        var toArray =Array.prototype.slice;\n        files = toArray.call(files).filter(function(item){\n            return item.type !== \"\";\n        });\n        var sessionLength = files.length-1;\n        var sessionIndx=0;\n        var sessionArray = {};\n        if (sessionStorage[\"blanketSessionLoader\"]){\n            sessionArray = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n        }\n\n\n        var fileLoader = function(event){\n            var fileContent = event.currentTarget.result;\n            var file = files[sessionIndx];\n            var filename = file.webkitRelativePath && file.webkitRelativePath !== '' ? file.webkitRelativePath : file.name;\n            sessionArray[filename] = fileContent;\n            sessionIndx++;\n            if (sessionIndx === sessionLength){\n                sessionStorage.setItem(\"blanketSessionLoader\", JSON.stringify(sessionArray));\n                document.location.reload();\n            }else{\n                readFile(files[sessionIndx]);\n            }\n        };\n        function readFile(file){\n            var reader = new FileReader();\n            reader.onload = fileLoader;\n            reader.readAsText(file);\n        }\n        readFile(files[sessionIndx]);\n    },\n    _loadFile: function(path){\n        if (typeof path !== \"undefined\"){\n            var request = new XMLHttpRequest();\n            request.open('GET', path, false);\n            request.send();\n            _blanket._addScript(request.responseText);\n        }\n    },\n    _addScript: function(data){\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.text = data;\n        (document.body || document.getElementsByTagName('head')[0]).appendChild(script);\n    },\n    hasAdapter: function(callback){\n        return _blanket.options(\"adapter\") !== null;\n    },\n    report: function(coverage_data){\n        if (!document.getElementById(\"blanketLoaderDialog\")){\n            //all found, clear it\n            _blanket.blanketSession = null;\n        }\n        coverage_data.files = window._$blanket;\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n\n        // Check if we have any covered files that requires reporting\n        // otherwise just exit gracefully.\n        if (!coverage_data.files || !Object.keys(coverage_data.files).length) {\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reporting No files were instrumented.\");}\n            return;\n        }\n\n        if (typeof coverage_data.files.branchFcn !== \"undefined\"){\n            delete coverage_data.files.branchFcn;\n        }\n        if (typeof _blanket.options(\"reporter\") === \"string\"){\n            _blanket._loadFile(_blanket.options(\"reporter\"));\n            _blanket.customReporter(coverage_data,_blanket.options(\"reporter_options\"));\n        }else if (typeof _blanket.options(\"reporter\") === \"function\"){\n            _blanket.options(\"reporter\")(coverage_data,_blanket.options(\"reporter_options\"));\n        }else if (typeof _blanket.defaultReporter === 'function'){\n            _blanket.defaultReporter(coverage_data,_blanket.options(\"reporter_options\"));\n        }else{\n            throw new Error(\"no reporter defined.\");\n        }\n    },\n    _bindStartTestRunner: function(bindEvent,startEvent){\n        if (bindEvent){\n            bindEvent(startEvent);\n        }else{\n            window.addEventListener(\"load\",startEvent,false);\n        }\n    },\n    _loadSourceFiles: function(callback){\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n        function copy(o){\n          var _copy = Object.create( Object.getPrototypeOf(o) );\n          var propNames = Object.getOwnPropertyNames(o);\n\n          propNames.forEach(function(name){\n            var desc = Object.getOwnPropertyDescriptor(o, name);\n            Object.defineProperty(_copy, name, desc);\n          });\n\n          return _copy;\n        }\n        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Collecting page scripts\");}\n        var scripts = _blanket.utils.collectPageScripts();\n        //_blanket.options(\"filter\",scripts);\n        if (scripts.length === 0){\n            callback();\n        }else{\n\n            //check session state\n            if (sessionStorage[\"blanketSessionLoader\"]){\n                _blanket.blanketSession = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n            }\n            \n            scripts.forEach(function(file,indx){\n                _blanket.utils.cache[file]={\n                    loaded:false\n                };\n            });\n            \n            var currScript=-1;\n            _blanket.utils.loadAll(function(test){\n                if (test){\n                  return typeof scripts[currScript+1] !== 'undefined';\n                }\n                currScript++;\n                if (currScript >= scripts.length){\n                  return null;\n                }\n                return scripts[currScript];\n            },callback);\n        }\n    },\n    beforeStartTestRunner: function(opts){\n        opts = opts || {};\n        opts.checkRequirejs = typeof opts.checkRequirejs === \"undefined\" ? true : opts.checkRequirejs;\n        opts.callback = opts.callback || function() {  };\n        opts.coverage = typeof opts.coverage === \"undefined\" ? true : opts.coverage;\n        if (opts.coverage) {\n            _blanket._bindStartTestRunner(opts.bindEvent,\n            function(){\n                _blanket._loadSourceFiles(function() {\n\n                    var allLoaded = function(){\n                        return opts.condition ? opts.condition() : _blanket.requireFilesLoaded();\n                    };\n                    var check = function() {\n                        if (allLoaded()) {\n                            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded, init start test runner callback.\");}\n                            var cb = _blanket.options(\"testReadyCallback\");\n\n                            if (cb){\n                                if (typeof cb === \"function\"){\n                                    cb(opts.callback);\n                                }else if (typeof cb === \"string\"){\n                                    _blanket._addScript(cb);\n                                    opts.callback();\n                                }\n                            }else{\n                                opts.callback();\n                            }\n                        } else {\n                            setTimeout(check, 13);\n                        }\n                    };\n                    check();\n                });\n            });\n        }else{\n            opts.callback();\n        }\n    },\n    utils: {\n        qualifyURL: function (url) {\n            //http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n            var a = document.createElement('a');\n            a.href = url;\n            return a.href;\n        }\n    }\n});\n\n})(blanket);\n\nblanket.defaultReporter = function(coverage){\n    var cssSytle = \"#blanket-main {margin:2px;background:#EEE;color:#333;clear:both;font-family:'Helvetica Neue Light', 'HelveticaNeue-Light', 'Helvetica Neue', Calibri, Helvetica, Arial, sans-serif; font-size:17px;} #blanket-main a {color:#333;text-decoration:none;}  #blanket-main a:hover {text-decoration:underline;} .blanket {margin:0;padding:5px;clear:both;border-bottom: 1px solid #FFFFFF;} .bl-error {color:red;}.bl-success {color:#5E7D00;} .bl-file{width:auto;} .bl-cl{float:left;} .blanket div.rs {margin-left:50px; width:150px; float:right} .bl-nb {padding-right:10px;} #blanket-main a.bl-logo {color: #EB1764;cursor: pointer;font-weight: bold;text-decoration: none} .bl-source{ overflow-x:scroll; background-color: #FFFFFF; border: 1px solid #CBCBCB; color: #363636; margin: 25px 20px; width: 80%;} .bl-source div{white-space: pre;font-family: monospace;} .bl-source > div > span:first-child{background-color: #EAEAEA;color: #949494;display: inline-block;padding: 0 10px;text-align: center;width: 30px;} .bl-source .miss{background-color:#e6c3c7} .bl-source span.branchWarning{color:#000;background-color:yellow;} .bl-source span.branchOkay{color:#000;background-color:transparent;}\",\n        successRate = 60,\n        head = document.head,\n        fileNumber = 0,\n        body = document.body,\n        headerContent,\n        hasBranchTracking = Object.keys(coverage.files).some(function(elem){\n          return typeof coverage.files[elem].branchData !== 'undefined';\n        }),\n        bodyContent = \"<div id='blanket-main'><div class='blanket bl-title'><div class='bl-cl bl-file'><a href='http://alex-seville.github.com/blanket/' target='_blank' class='bl-logo'>Blanket.js</a> results</div><div class='bl-cl rs'>Coverage (%)</div><div class='bl-cl rs'>Covered/Total Smts.</div>\"+(hasBranchTracking ? \"<div class='bl-cl rs'>Covered/Total Branches</div>\":\"\")+\"<div style='clear:both;'></div></div>\",\n        fileTemplate = \"<div class='blanket {{statusclass}}'><div class='bl-cl bl-file'><span class='bl-nb'>{{fileNumber}}.</span><a href='javascript:blanket_toggleSource(\\\"file-{{fileNumber}}\\\")'>{{file}}</a></div><div class='bl-cl rs'>{{percentage}} %</div><div class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</div>\"+( hasBranchTracking ? \"<div class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</div>\" : \"\" )+\"<div id='file-{{fileNumber}}' class='bl-source' style='display:none;'>{{source}}</div><div style='clear:both;'></div></div>\";\n        grandTotalTemplate = \"<div class='blanket grand-total {{statusclass}}'><div class='bl-cl'>{{rowTitle}}</div><div class='bl-cl rs'>{{percentage}} %</div><div class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</div>\"+( hasBranchTracking ? \"<div class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</div>\" : \"\" ) + \"<div style='clear:both;'></div></div>\";\n\n    function blanket_toggleSource(id) {\n        var element = document.getElementById(id);\n        if(element.style.display === 'block') {\n            element.style.display = 'none';\n        } else {\n            element.style.display = 'block';\n        }\n    }\n\n\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.text = blanket_toggleSource.toString().replace('function ' + blanket_toggleSource.name, 'function blanket_toggleSource');\n    body.appendChild(script);\n\n    var percentage = function(number, total) {\n        return (Math.round(((number/total) * 100)*100)/100);\n    };\n\n    var appendTag = function (type, el, str) {\n        var dom = document.createElement(type);\n        dom.innerHTML = str;\n        el.appendChild(dom);\n    };\n\n    function escapeInvalidXmlChars(str) {\n        return str.replace(/\\&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\")\n            .replace(/\\\"/g, \"&quot;\")\n            .replace(/\\'/g, \"&apos;\");\n    }\n\n    function isBranchFollowed(data,bool){\n        var mode = bool ? 0 : 1;\n        if (typeof data === 'undefined' ||\n            typeof data === null ||\n            typeof data[mode] === 'undefined'){\n            return false;\n        }\n        return data[mode].length > 0;\n    }\n\n    var branchStack = [];\n\n    function branchReport(colsIndex,src,cols,offset,lineNum){\n      var newsrc=\"\";\n       var postfix=\"\";\n      if (branchStack.length > 0){\n        newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],branchStack[0][1].consequent === branchStack[0][0]) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        if (branchStack[0][0].end.line === lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n          src = src.slice(branchStack[0][0].end.column);\n          branchStack.shift();\n          if (branchStack.length > 0){\n            newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n            if (branchStack[0][0].end.line === lineNum){\n              newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n              src = src.slice(branchStack[0][0].end.column);\n              branchStack.shift();\n              if (!cols){\n                return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n              }\n            }\n            else if (!cols){\n              return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n            }\n            else{\n              postfix = \"</span>\";\n            }\n          }else if (!cols){\n            return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n          }\n        }else if(!cols){\n          return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n        }else{\n          postfix = \"</span>\";\n        }\n      }\n      var thisline = cols[colsIndex];\n      //consequent\n      \n      var cons = thisline.consequent;\n      if (cons.start.line > lineNum){\n        branchStack.unshift([thisline.alternate,thisline]);\n        branchStack.unshift([cons,thisline]);\n        src = escapeInvalidXmlChars(src);\n      }else{\n        var style = \"<span class='\" + (isBranchFollowed(thisline,true) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        newsrc += escapeInvalidXmlChars(src.slice(0,cons.start.column-offset)) + style;\n        \n        if (cols.length > colsIndex+1 &&\n          cols[colsIndex+1].consequent.start.line === lineNum &&\n          cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].consequent.end.column-offset)\n        {\n          var res = branchReport(colsIndex+1,src.slice(cons.start.column-offset,cons.end.column-offset),cols,cons.start.column-offset,lineNum);\n          newsrc += res.src;\n          cols = res.cols;\n          cols[colsIndex+1] = cols[colsIndex+2];\n          cols.length--;\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.start.column-offset,cons.end.column-offset));\n        }\n        newsrc += \"</span>\";\n\n        var alt = thisline.alternate;\n        if (alt.start.line > lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset));\n          branchStack.unshift([alt,thisline]);\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset,alt.start.column-offset));\n          style = \"<span class='\" + (isBranchFollowed(thisline,false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n          newsrc +=  style;\n          if (cols.length > colsIndex+1 &&\n            cols[colsIndex+1].consequent.start.line === lineNum &&\n            cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].alternate.end.column-offset)\n          {\n            var res2 = branchReport(colsIndex+1,src.slice(alt.start.column-offset,alt.end.column-offset),cols,alt.start.column-offset,lineNum);\n            newsrc += res2.src;\n            cols = res2.cols;\n            cols[colsIndex+1] = cols[colsIndex+2];\n            cols.length--;\n          }else{\n            newsrc += escapeInvalidXmlChars(src.slice(alt.start.column-offset,alt.end.column-offset));\n          }\n          newsrc += \"</span>\";\n          newsrc += escapeInvalidXmlChars(src.slice(alt.end.column-offset));\n          src = newsrc;\n        }\n      }\n      return {src:src+postfix, cols:cols};\n    }\n\n    var isUndefined =  function(item){\n            return typeof item !== 'undefined';\n      };\n\n    var files = coverage.files;\n    var totals = {\n      totalSmts: 0,\n      numberOfFilesCovered: 0,\n      passedBranches: 0,\n      totalBranches: 0,\n      moduleTotalStatements : {},\n      moduleTotalCoveredStatements : {},\n      moduleTotalBranches : {},\n      moduleTotalCoveredBranches : {}\n    };\n\n    // check if a data-cover-modulepattern was provided for per-module coverage reporting\n    var modulePattern = _blanket.options(\"modulePattern\");\n    var modulePatternRegex = ( modulePattern ? new RegExp(modulePattern) : null );\n\n    for(var file in files)\n    {\n        if (!files.hasOwnProperty(file)) {\n            continue;\n        }\n\n        fileNumber++;\n\n        var statsForFile = files[file],\n            totalSmts = 0,\n            numberOfFilesCovered = 0,\n            code = [],\n            i;\n        \n\n        var end = [];\n        for(i = 0; i < statsForFile.source.length; i +=1){\n            var src = statsForFile.source[i];\n            \n            if (branchStack.length > 0 ||\n                typeof statsForFile.branchData !== 'undefined')\n            {\n                if (typeof statsForFile.branchData[i+1] !== 'undefined')\n                {\n                  var cols = statsForFile.branchData[i+1].filter(isUndefined);\n                  var colsIndex=0;\n                  \n                    \n                  src = branchReport(colsIndex,src,cols,0,i+1).src;\n                  \n                }else if (branchStack.length){\n                  src = branchReport(0,src,null,0,i+1).src;\n                }else{\n                  src = escapeInvalidXmlChars(src);\n                }\n              }else{\n                src = escapeInvalidXmlChars(src);\n              }\n              var lineClass=\"\";\n              if(statsForFile[i+1]) {\n                numberOfFilesCovered += 1;\n                totalSmts += 1;\n                lineClass = 'hit';\n              }else{\n                if(statsForFile[i+1] === 0){\n                    totalSmts++;\n                    lineClass = 'miss';\n                }\n              }\n              code[i + 1] = \"<div class='\"+lineClass+\"'><span class=''>\"+(i + 1)+\"</span>\"+src+\"</div>\";\n        }\n        totals.totalSmts += totalSmts;\n        totals.numberOfFilesCovered += numberOfFilesCovered;\n        var totalBranches=0;\n        var passedBranches=0;\n        if (typeof statsForFile.branchData !== 'undefined'){\n          for(var j=0;j<statsForFile.branchData.length;j++){\n            if (typeof statsForFile.branchData[j] !== 'undefined'){\n              for(var k=0;k<statsForFile.branchData[j].length;k++){\n                if (typeof statsForFile.branchData[j][k] !== 'undefined'){\n                  totalBranches++;\n                  if (typeof statsForFile.branchData[j][k][0] !== 'undefined' &&\n                    statsForFile.branchData[j][k][0].length > 0 &&\n                    typeof statsForFile.branchData[j][k][1] !== 'undefined' &&\n                    statsForFile.branchData[j][k][1].length > 0){\n                    passedBranches++;\n                  }\n                }\n              }\n            }\n          }\n        }\n        totals.passedBranches += passedBranches;\n        totals.totalBranches += totalBranches;\n\n        // if \"data-cover-modulepattern\" was provided, \n        // track totals per module name as well as globally\n        if (modulePatternRegex) {\n            var moduleName = file.match(modulePatternRegex)[1];\n\n            if(!totals.moduleTotalStatements.hasOwnProperty(moduleName)) {\n                totals.moduleTotalStatements[moduleName] = 0;\n                totals.moduleTotalCoveredStatements[moduleName] = 0;\n            }\n\n            totals.moduleTotalStatements[moduleName] += totalSmts;\n            totals.moduleTotalCoveredStatements[moduleName] += numberOfFilesCovered;\n\n            if(!totals.moduleTotalBranches.hasOwnProperty(moduleName)) {\n                totals.moduleTotalBranches[moduleName] = 0;\n                totals.moduleTotalCoveredBranches[moduleName] = 0;\n            }\n\n            totals.moduleTotalBranches[moduleName] += totalBranches;\n            totals.moduleTotalCoveredBranches[moduleName] += passedBranches;\n        }\n\n        var result = percentage(numberOfFilesCovered, totalSmts);\n\n        var output = fileTemplate.replace(\"{{file}}\", file)\n                                 .replace(\"{{percentage}}\",result)\n                                 .replace(\"{{numberCovered}}\", numberOfFilesCovered)\n                                 .replace(/\\{\\{fileNumber\\}\\}/g, fileNumber)\n                                 .replace(\"{{totalSmts}}\", totalSmts)\n                                 .replace(\"{{totalBranches}}\", totalBranches)\n                                 .replace(\"{{passedBranches}}\", passedBranches)\n                                 .replace(\"{{source}}\", code.join(\" \"));\n        if(result < successRate)\n        {\n            output = output.replace(\"{{statusclass}}\", \"bl-error\");\n        } else {\n            output = output.replace(\"{{statusclass}}\", \"bl-success\");\n        }\n        bodyContent += output;\n    }\n\n    // create temporary function for use by the global totals reporter, \n    // as well as the per-module totals reporter\n    var createAggregateTotal = function(numSt, numCov, numBranch, numCovBr, moduleName) {\n\n        var totalPercent = percentage(numCov, numSt);\n        var statusClass = totalPercent < successRate ? \"bl-error\" : \"bl-success\";\n        var rowTitle = ( moduleName ? \"Total for module: \" + moduleName : \"Global total\" );\n        var totalsOutput = grandTotalTemplate.replace(\"{{rowTitle}}\", rowTitle)\n            .replace(\"{{percentage}}\", totalPercent)\n            .replace(\"{{numberCovered}}\", numCov)\n            .replace(\"{{totalSmts}}\", numSt)\n            .replace(\"{{passedBranches}}\", numCovBr)\n            .replace(\"{{totalBranches}}\", numBranch)\n            .replace(\"{{statusclass}}\", statusClass);\n\n        bodyContent += totalsOutput;\n    };\n\n    // if \"data-cover-modulepattern\" was provided, \n    // output the per-module totals alongside the global totals    \n    if (modulePatternRegex) {\n        for (var thisModuleName in totals.moduleTotalStatements) {\n            if (totals.moduleTotalStatements.hasOwnProperty(thisModuleName)) {\n\n                var moduleTotalSt = totals.moduleTotalStatements[thisModuleName];\n                var moduleTotalCovSt = totals.moduleTotalCoveredStatements[thisModuleName];\n\n                var moduleTotalBr = totals.moduleTotalBranches[thisModuleName];\n                var moduleTotalCovBr = totals.moduleTotalCoveredBranches[thisModuleName];\n\n                createAggregateTotal(moduleTotalSt, moduleTotalCovSt, moduleTotalBr, moduleTotalCovBr, thisModuleName);\n            }\n        }\n    }\n\n    createAggregateTotal(totals.totalSmts, totals.numberOfFilesCovered, totals.totalBranches, totals.passedBranches, null);\n    bodyContent += \"</div>\"; //closing main\n\n\n    appendTag('style', head, cssSytle);\n    //appendStyle(body, headerContent);\n    if (document.getElementById(\"blanket-main\")){\n        document.getElementById(\"blanket-main\").innerHTML=\n            bodyContent.slice(23,-6);\n    }else{\n        appendTag('div', body, bodyContent);\n    }\n    //appendHtml(body, '</div>');\n};\n\n(function(){\n    var newOptions={};\n    //http://stackoverflow.com/a/2954896\n    var toArray =Array.prototype.slice;\n    var scripts = toArray.call(document.scripts);\n    toArray.call(scripts[scripts.length - 1].attributes)\n                    .forEach(function(es){\n                        if(es.nodeName === \"data-cover-only\"){\n                            newOptions.filter = es.nodeValue;\n                        }\n                        if(es.nodeName === \"data-cover-never\"){\n                            newOptions.antifilter = es.nodeValue;\n                        }\n                        if(es.nodeName === \"data-cover-reporter\"){\n                            newOptions.reporter = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-adapter\"){\n                            newOptions.adapter = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-loader\"){\n                            newOptions.loader = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-timeout\"){\n                            newOptions.timeout = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-modulepattern\") {\n                            newOptions.modulePattern = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-reporter-options\"){\n                            try{\n                                newOptions.reporter_options = JSON.parse(es.nodeValue);\n                            }catch(e){\n                                if (blanket.options(\"debug\")){\n                                    throw new Error(\"Invalid reporter options.  Must be a valid stringified JSON object.\");\n                                }\n                            }\n                        }\n                        if (es.nodeName === \"data-cover-testReadyCallback\"){\n                            newOptions.testReadyCallback = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-customVariable\"){\n                            newOptions.customVariable = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-flags\"){\n                            var flags = \" \"+es.nodeValue+\" \";\n                            if (flags.indexOf(\" ignoreError \") > -1){\n                                newOptions.ignoreScriptError = true;\n                            }\n                            if (flags.indexOf(\" autoStart \") > -1){\n                                newOptions.autoStart = true;\n                            }\n                            if (flags.indexOf(\" ignoreCors \") > -1){\n                                newOptions.ignoreCors = true;\n                            }\n                            if (flags.indexOf(\" branchTracking \") > -1){\n                                newOptions.branchTracking = true;\n                            }\n                            if (flags.indexOf(\" sourceURL \") > -1){\n                                newOptions.sourceURL = true;\n                            }\n                            if (flags.indexOf(\" debug \") > -1){\n                                newOptions.debug = true;\n                            }\n                            if (flags.indexOf(\" engineOnly \") > -1){\n                                newOptions.engineOnly = true;\n                            }\n                            if (flags.indexOf(\" commonJS \") > -1){\n                                newOptions.commonJS = true;\n                            }\n                             if (flags.indexOf(\" instrumentCache \") > -1){\n                                newOptions.instrumentCache = true;\n                            }\n                        }\n                    });\n    blanket.options(newOptions);\n\n    if (typeof requirejs !== 'undefined'){\n        blanket.options(\"existingRequireJS\",true);\n    }\n    /* setup requirejs loader, if needed */\n    \n    if (blanket.options(\"commonJS\")){\n        blanket._commonjs = {};\n    }\n})();\n(function(_blanket){\n_blanket.extend({\n    utils: {\n        normalizeBackslashes: function(str) {\n            return str.replace(/\\\\/g, '/');\n        },\n        matchPatternAttribute: function(filename,pattern){\n            if (typeof pattern === 'string'){\n                if (pattern.indexOf(\"[\") === 0){\n                    //treat as array\n                    var pattenArr = pattern.slice(1,pattern.length-1).split(\",\");\n                    return pattenArr.some(function(elem){\n                        return _blanket.utils.matchPatternAttribute(filename,_blanket.utils.normalizeBackslashes(elem.slice(1,-1)));\n                        //return filename.indexOf(_blanket.utils.normalizeBackslashes(elem.slice(1,-1))) > -1;\n                    });\n                }else if ( pattern.indexOf(\"//\") === 0){\n                    var ex = pattern.slice(2,pattern.lastIndexOf('/'));\n                    var mods = pattern.slice(pattern.lastIndexOf('/')+1);\n                    var regex = new RegExp(ex,mods);\n                    return regex.test(filename);\n                }else if (pattern.indexOf(\"#\") === 0){\n                    return window[pattern.slice(1)].call(window,filename);\n                }else{\n                    return filename.indexOf(_blanket.utils.normalizeBackslashes(pattern)) > -1;\n                }\n            }else if ( pattern instanceof Array ){\n                return pattern.some(function(elem){\n                    return _blanket.utils.matchPatternAttribute(filename,elem);\n                });\n            }else if (pattern instanceof RegExp){\n                return pattern.test(filename);\n            }else if (typeof pattern === \"function\"){\n                return pattern.call(window,filename);\n            }\n        },\n        blanketEval: function(data){\n            _blanket._addScript(data);\n        },\n        collectPageScripts: function(){\n            var toArray = Array.prototype.slice;\n            var scripts = toArray.call(document.scripts);\n            var selectedScripts=[],scriptNames=[];\n            var filter = _blanket.options(\"filter\");\n            if(filter != null){\n                //global filter in place, data-cover-only\n                var antimatch = _blanket.options(\"antifilter\");\n                selectedScripts = toArray.call(document.scripts)\n                                .filter(function(s){\n                                    return toArray.call(s.attributes).filter(function(sn){\n                                        return sn.nodeName === \"src\" && _blanket.utils.matchPatternAttribute(sn.nodeValue,filter) &&\n                                            (typeof antimatch === \"undefined\" || !_blanket.utils.matchPatternAttribute(sn.nodeValue,antimatch));\n                                    }).length === 1;\n                                });\n            }else{\n                selectedScripts = toArray.call(document.querySelectorAll(\"script[data-cover]\"));\n            }\n            scriptNames = selectedScripts.map(function(s){\n                                    return _blanket.utils.qualifyURL(\n                                        toArray.call(s.attributes).filter(\n                                            function(sn){\n                                                return sn.nodeName === \"src\";\n                                            })[0].nodeValue);\n                                    });\n            if (!filter){\n                _blanket.options(\"filter\",\"['\"+scriptNames.join(\"','\")+\"']\");\n            }\n            return scriptNames;\n        },\n        loadAll: function(nextScript,cb,preprocessor){\n            /**\n             * load dependencies\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript=nextScript();\n            var isLoaded = _blanket.utils.scriptIsLoaded(\n                                currScript,\n                                _blanket.utils.ifOrdered,\n                                nextScript,\n                                cb\n                            );\n            \n            if (!(_blanket.utils.cache[currScript] && _blanket.utils.cache[currScript].loaded)){\n                var attach = function(){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Mark script:\"+currScript+\", as loaded and move to next script.\");}\n                    isLoaded();\n                };\n                var whenDone = function(result){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File loading finished\");}\n                    if (typeof result !== 'undefined'){\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Add file to DOM.\");}\n                        _blanket._addScript(result);\n                    }\n                    attach();\n                };\n\n                _blanket.utils.attachScript(\n                    {\n                        url: currScript\n                    },\n                    function (content){\n                        _blanket.utils.processFile(\n                            content,\n                            currScript,\n                            whenDone,\n                            whenDone\n                        );\n                    }\n                );\n            }else{\n                isLoaded();\n            }\n        },\n        attachScript: function(options,cb){\n           var timeout = _blanket.options(\"timeout\") || 3000;\n           setTimeout(function(){\n                if (!_blanket.utils.cache[options.url].loaded){\n                    throw new Error(\"error loading source script\");\n                }\n           },timeout);\n           _blanket.utils.getFile(\n                options.url,\n                cb,\n                function(){ throw new Error(\"error loading source script\");}\n            );\n        },\n        ifOrdered: function(nextScript,cb){\n            /**\n             * ordered loading callback\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript = nextScript(true);\n            if (currScript){\n              _blanket.utils.loadAll(nextScript,cb);\n            }else{\n              cb(new Error(\"Error in loading chain.\"));\n            }\n        },\n        scriptIsLoaded: function(url,orderedCb,nextScript,cb){\n            /**\n           * returns a callback that checks a loading list to see if a script is loaded.\n           * @param {orderedCb} callback if ordered loading is being done\n           * @param {nextScript} factory for next priority level\n           * @param {cb} the done callback\n           */\n           if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Returning function\");}\n            return function(){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Marking file as loaded: \"+url);}\n           \n                _blanket.utils.cache[url].loaded=true;\n            \n                if (_blanket.utils.allLoaded()){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded\");}\n                    cb();\n                }else if (orderedCb){\n                    //if it's ordered we need to\n                    //traverse down to the next\n                    //priority level\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Load next file.\");}\n                    orderedCb(nextScript,cb);\n                }\n            };\n        },\n        cache: {},\n        allLoaded: function (){\n            /**\n             * check if depdencies are loaded in cache\n             */\n            var cached = Object.keys(_blanket.utils.cache);\n            for (var i=0;i<cached.length;i++){\n                if (!_blanket.utils.cache[cached[i]].loaded){\n                    return false;\n                }\n            }\n            return true;\n        },\n        processFile: function (content,url,cb,oldCb) {\n            var match = _blanket.options(\"filter\");\n            //we check the never matches first\n            var antimatch = _blanket.options(\"antifilter\");\n            if (typeof antimatch !== \"undefined\" &&\n                    _blanket.utils.matchPatternAttribute(url,antimatch)\n                ){\n                oldCb(content);\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File will never be instrumented:\"+url);}\n                _blanket.requiringFile(url,true);\n            }else if (_blanket.utils.matchPatternAttribute(url,match)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Attempting instrument of:\"+url);}\n                _blanket.instrument({\n                    inputFile: content,\n                    inputFileName: url\n                },function(instrumented){\n                    try{\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-instrument of:\"+url+\" was successfull.\");}\n                        _blanket.utils.blanketEval(instrumented);\n                        cb();\n                        _blanket.requiringFile(url,true);\n                    }\n                    catch(err){\n                        if (_blanket.options(\"ignoreScriptError\")){\n                            //we can continue like normal if\n                            //we're ignoring script errors,\n                            //but otherwise we don't want\n                            //to completeLoad or the error might be\n                            //missed.\n                            if (_blanket.options(\"debug\")) { console.log(\"BLANKET-There was an error loading the file:\"+url); }\n                            cb(content);\n                            _blanket.requiringFile(url,true);\n                        }else{\n                            throw new Error(\"Error parsing instrumented code: \"+err);\n                        }\n                    }\n                });\n            }else{\n                if (_blanket.options(\"debug\")) { console.log(\"BLANKET-Loading (without instrumenting) the file:\"+url);}\n                oldCb(content);\n                _blanket.requiringFile(url,true);\n            }\n\n        },\n        cacheXhrConstructor: function(){\n            var Constructor, createXhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                Constructor = XMLHttpRequest;\n                this.createXhr = function() { return new Constructor(); };\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                Constructor = ActiveXObject;\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        new ActiveXObject(progId);\n                        break;\n                    } catch (e) {}\n                }\n                this.createXhr = function() { return new Constructor(progId); };\n            }\n        },\n        craeteXhr: function () {\n            throw new Error(\"cacheXhrConstructor is supposed to overwrite this function.\");\n        },\n        getFile: function(url, callback, errback, onXhr){\n            var foundInSession = false;\n            if (_blanket.blanketSession){\n                var files = Object.keys(_blanket.blanketSession);\n                for (var i=0; i<files.length;i++ ){\n                    var key = files[i];\n                    if (url.indexOf(key) > -1){\n                        callback(_blanket.blanketSession[key]);\n                        foundInSession=true;\n                        return;\n                    }\n                }\n            }\n            if (!foundInSession){\n                var xhr = _blanket.utils.createXhr();\n                xhr.open('GET', url, true);\n\n                //Allow overrides specified in config\n                if (onXhr) {\n                    onXhr(xhr, url);\n                }\n\n                xhr.onreadystatechange = function (evt) {\n                    var status, err;\n                    \n                    //Do not explicitly handle errors, those should be\n                    //visible via console output in the browser.\n                    if (xhr.readyState === 4) {\n                        status = xhr.status;\n                        if ((status > 399 && status < 600) /*||\n                            (status === 0 &&\n                                navigator.userAgent.toLowerCase().indexOf('firefox') > -1)\n                           */ ) {\n                            //An http 4xx or 5xx error. Signal an error.\n                            err = new Error(url + ' HTTP status: ' + status);\n                            err.xhr = xhr;\n                            errback(err);\n                        } else {\n                            callback(xhr.responseText);\n                        }\n                    }\n                };\n                try{\n                    xhr.send(null);\n                }catch(e){\n                    if (e.code && (e.code === 101 || e.code === 1012) && _blanket.options(\"ignoreCors\") === false){\n                        //running locally and getting error from browser\n                        _blanket.showManualLoader();\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n        }\n    }\n});\n\n(function(){\n    var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n    var requirejs = blanket.options(\"commonJS\") ? blanket._commonjs.requirejs : window.requirejs;\n    if (!_blanket.options(\"engineOnly\") && _blanket.options(\"existingRequireJS\")){\n\n        _blanket.utils.oldloader = requirejs.load;\n\n        requirejs.load = function (context, moduleName, url) {\n            _blanket.requiringFile(url);\n            _blanket.utils.getFile(url,\n                function(content){\n                    _blanket.utils.processFile(\n                        content,\n                        url,\n                        function newLoader(){\n                            context.completeLoad(moduleName);\n                        },\n                        function oldLoader(){\n                            _blanket.utils.oldloader(context, moduleName, url);\n                        }\n                    );\n                }, function (err) {\n                _blanket.requiringFile();\n                throw err;\n            });\n        };\n    }\n    // Save the XHR constructor, just in case frameworks like Sinon would sandbox it.\n    _blanket.utils.cacheXhrConstructor();\n})();\n\n})(blanket);\n\n(function(){\nif (typeof QUnit !== 'undefined'){\n    //check to make sure requirejs is completed before we start the test runner\n    var allLoaded = function() {\n        return window.QUnit.config.queue.length > 0 && blanket.noConflict().requireFilesLoaded();\n    };\n\n    if (!QUnit.config.urlConfig[0].tooltip){\n        //older versions we run coverage automatically\n        //and we change how events are binded\n        QUnit.begin=function(){\n            blanket.noConflict().setupCoverage();\n        };\n        \n        QUnit.done=function(failures, total) {\n            blanket.noConflict().onTestsDone();\n        };\n        QUnit.moduleStart=function( details ) {\n            blanket.noConflict().onModuleStart();\n        };\n        QUnit.testStart=function( details ) {\n            blanket.noConflict().onTestStart();\n        };\n        QUnit.testDone=function( details ) {\n            blanket.noConflict().onTestDone(details.total,details.passed);\n        };\n        blanket.beforeStartTestRunner({\n            condition: allLoaded,\n            callback: QUnit.start\n        });\n    }else{\n        QUnit.config.urlConfig.push({\n            id: \"coverage\",\n            label: \"Enable coverage\",\n            tooltip: \"Enable code coverage.\"\n        });\n    \n        if ( QUnit.urlParams.coverage || blanket.options(\"autoStart\") ) {\n            QUnit.begin(function(){\n                blanket.noConflict().setupCoverage();\n            });\n            \n            QUnit.done(function(failures, total) {\n                blanket.noConflict().onTestsDone();\n            });\n            QUnit.moduleStart(function( details ) {\n                blanket.noConflict().onModuleStart();\n            });\n            QUnit.testStart(function( details ) {\n                blanket.noConflict().onTestStart();\n            });\n            QUnit.testDone(function( details ) {\n                blanket.noConflict().onTestDone(details.total,details.passed);\n            });\n            blanket.noConflict().beforeStartTestRunner({\n                condition: allLoaded,\n                callback: function(){\n                    if (!(blanket.options(\"existingRequireJS\") && !blanket.options(\"autoStart\"))){\n                        QUnit.start();\n                    }\n                }\n            });\n        }else{\n            if (blanket.options(\"existingRequireJS\")){ requirejs.load = _blanket.utils.oldloader; }\n            blanket.noConflict().beforeStartTestRunner({\n                condition: allLoaded,\n                callback: function(){\n                    if (!(blanket.options(\"existingRequireJS\") && !blanket.options(\"autoStart\"))){\n                        QUnit.start();\n                    }\n                },\n                coverage:false\n            });\n        }\n    }\n}\n})();"],"names":[],"mappingsifile":"test-support.js"}