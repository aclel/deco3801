!function(){"use strict";angular.module("app",["app.core","app.gui","app.auth","app.nav","app.dashboard","app.config","app.warnings","app.admin"])}(),function(){"use strict";angular.module("app.admin",["app.core","app.gui"])}(),function(){"use strict";angular.module("app.auth",[])}(),function(){"use strict";angular.module("app.config",["app.core","app.gui","app.templates"])}(),function(){"use strict";angular.module("app.core",["ui.router"])}(),function(){"use strict";angular.module("app.dashboard",["app.core","app.gui","chart.js","ui.indeterminate"])}(),function(){"use strict";angular.module("app.gui",["mgcrea.ngStrap","mgcrea.ngStrap.helpers.dimensions","mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.helpers.parseOptions","mgcrea.ngStrap.tooltip","mgcrea.ngStrap.datepicker","mgcrea.ngStrap.timepicker","mgcrea.ngStrap.button","mgcrea.ngStrap.select"])}(),function(){"use strict";angular.module("app.nav",["app.core","app.auth"])}(),function(){"use strict";angular.module("app.warnings",["app.core","app.gui"])}(),function(){"use strict";angular.module("app").constant("moment",moment).constant("google",google)}(),function(){"use strict";angular.module("app").constant("SERVER_ADDRESS","http://teamneptune.co")}(),function(){"use strict";function n(n,e){function t(){r()}function r(){e.getUsers().then(function(n){m.users=n.data.users,o()},function(e){n.error(e)})}function o(){m.users.forEach(function(n){n.lastLogin.Valid?n.lastLogin.text=moment(n.lastLogin.Time).fromNow():n.lastLogin.text="Never"})}function a(n){m.editUserId=n.id,m.editUser=n}function i(){-2!=m.editUserId?e.updateUser(m.editUser).then(function(n){r()},function(e){n.error(e)}):(e.addUser(m.editUser).then(function(n){r()},function(e){n.error(e)}),m.users.splice(m.users.length-1,1)),m.editUserId=-1}function s(){-2==m.editUserId&&m.users.splice(m.users.length-1,1),m.editUserId=-1}function u(t){e.deleteUser(t.id).then(function(n){r()},function(e){n.error(e)})}function d(n){return(-1==m.editUserId||m.editUserId==n.id)&&-2!=n.id}function c(){var n={id:-2,role:m.roles[0]};m.users.push(n),a(n)}function l(){if(""!=m.newBuoyName){var t=p();e.addBuoy(m.newBuoyName,t).then(function(n){alert("Buoy created successfully")},function(e){n.error(e)}),m.newBuoyName=""}}function p(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=16*Math.random()|0,t="x"==n?e:3&e|8;return t.toString(16)})}var m=this;m.users=[],m.editUserId=-1,m.newBuoyName="",m.roles=["user","power_user","system_admin"],m.startEditingUser=a,m.finishEditingUser=i,m.deleteUser=u,m.cancelEditingUser=s,m.startAddingUser=c,m.showDeleteButton=d,m.addBuoy=l,t()}angular.module("app.admin").controller("AdminController",n),n.$inject=["$log","server"]}(),function(){"use strict";function n(n){n.configureStates(e())}function e(){return[{state:"admin",config:{url:"/admin",controller:"AdminController",controllerAs:"vm",templateUrl:"/app/admin/admin.html",data:{access:"system_admin"}}}]}angular.module("app.admin").run(n),n.$inject=["routerHelper"]}(),function(){"use strict";function n(n,e,t){function r(n,r,o,a,i){t.checkUser(r.data.access)||(n.preventDefault(),"^"===a.url&&(t.loggedIn()?e.go("dashboard"):e.go("login")))}n.$on("$stateChangeStart",r)}angular.module("app.auth").run(n),n.$inject=["$rootScope","$state","auth"]}(),function(){"use strict";function n(n,e,t,r,o){function a(){d()}function i(){r.login(c.email,c.password).then(function(n){t.loggedIn()&&(n.data.lastLogin.Valid?e.go("dashboard"):c.firstLogin=!0,d())},function(n){alert("Invalid email or password")})}function s(){""!=c.newPassword&&c.newPassword==c.confirmPassword?(r.changePassword(c.newPassword),c.newPassword=c.confirmPassword="",c.firstLogin=!1):alert("Invalid password")}function u(){r.forgotPassword(c.email)}function d(){c.email="andrew@dyergroup.com.au",c.password="D9mEpnvx"}var c=this;c.firstLogin=!1,c.login=i,c.changePassword=s,c.forgotPassword=u,a()}angular.module("app.auth").controller("AuthController",n),n.$inject=["$rootScope","$state","auth","server","routerHelper"]}(),function(){"use strict";function n(n){n.configureStates(e())}function e(){return[{state:"login",config:{url:"/login",templateUrl:"/app/auth/login.html",data:{access:"unauthed"}}}]}angular.module("app.auth").run(n),n.$inject=["routerHelper"]}(),function(){"use strict";function n(n,e){function t(){n.localStorage.removeItem("token")}function r(){var n=a();if(n){var t=d(n);return e().unix()<=t.exp}return!1}function o(e){n.localStorage.token=e}function a(){return n.localStorage.token}function i(){return d(a()).sub}function s(){var n=a();return null==n?"unauthed":d(n).role}function u(n){var e={unauthed:0,authed:1,user:1,power_user:2,system_admin:3,andrew:99999};if("any"==n)return!0;if("unauthed"==n){if(r())return!1}else if(!r())return!1;return e[s()]>=e[n]}function d(e){var t=e.split(".")[1],r=t.replace("-","+").replace("_","/");return JSON.parse(n.atob(r))}return{logout:t,loggedIn:r,getToken:a,saveToken:o,currentUser:i,checkUser:u}}angular.module("app.auth").factory("auth",n),n.$inject=["$window","moment"]}(),function(){"use strict";function n(n){function e(n){return n}function t(e){return e.data.token&&n.saveToken(e.data.token),e}return{request:e,response:t}}angular.module("app.auth").factory("authInterceptor",n),n.$inject=["auth"]}(),function(){"use strict";function n(n,e){function t(){r(),o(),a(),s(),F()}function r(){e.getBuoyGroups().then(function(n){_.buoyGroups=n.data.buoyGroups,d()},function(e){n.error(e)})}function o(){e.getBuoyInstances().then(function(n){_.buoyInstances=n.data.buoyInstances,d()},function(e){n.error(e)})}function a(){e.getCommandTypes().then(function(n){_.commandTypes=n.data.commandTypes,i()},function(e){n.error(e)})}function i(){e.getBuoyCommands().then(function(n){_.commands=n.data.commands,S()},function(e){n.error(e)})}function s(){e.getWarningTriggers().then(function(n){_.warningTriggers=n.data.warningTriggers,u()},function(e){n.error(e)})}function u(){e.getSensorTypes().then(function(n){_.sensorTypes=n.data.sensorTypes,c()},function(e){n.error(e)})}function d(){_.buoyInstances.forEach(function(n){b(n)})}function c(){_.warningTriggers.forEach(function(n){for(var e=0;e<_.buoyInstances.length;e++){var t=_.buoyInstances[e];if(t.id==n.buoyInstanceId){n.buoyName=t.name;break}}for(var e=0;e<_.sensorTypes.length;e++){var r=_.sensorTypes[e];if(r.id==n.sensorTypeId){n.sensorName=r.name;break}}})}function l(){return"instance"==_.selected.type?!0:"group"==_.selected.type&&_.groupBuoys.length>0?!0:"all"==_.selected.type&&_.buoyInstances.length>0?!0:!1}function p(){_.groupBuoys=[],_.buoyInstances.forEach(function(n){n.buoyGroupId==_.selected.obj.id&&_.groupBuoys.push(n)})}function m(){g(),_.selected.type="all"}function g(){_.editName.on=!1,_.editGroup.on=!1,_.newCommand=!1,_.newTrigger=!1}function f(n){g(),_.selected.type="group",_.selected.obj=n,p()}function v(n){g(),_.selected.type="instance",_.selected.obj=n,p()}function b(n){_.buoyGroups.forEach(function(e){return e.id==n.buoyGroupId?void(n.buoyGroupName=e.name):void 0})}function y(){_.editName.on=!0}function h(){_.editName.on=!1,"group"==_.selected.type?e.updateBuoyGroupName(_.selected.obj.id,_.selected.obj.name).then(function(n){r()},function(e){n.error(e)}):"instance"==_.selected.type&&e.updateBuoyInstanceName(_.selected.obj.id,_.selected.obj.name,_.selected.obj.buoyGroupId).then(function(n){o()},function(e){n.error(e)})}function w(){_.editName.on=!1}function I(){_.editGroup.on=!0,_.editGroup.buoyGroupId=_.selected.obj.buoyGroupId}function x(){_.editGroup.on=!1,_.selected.obj.buoyGroupId=_.editGroup.buoyGroupId,b(_.selected.obj),e.updateBuoyInstanceGroup(_.selected.obj.buoyId,_.editGroup.buoyGroupId,_.editGroup.name).then(function(n){o()},function(e){n.error(e)})}function T(){_.editGroup.on=!1}function B(){return _.editName.on?!0:_.editGroup.on?!0:_.newCommand?!0:_.newTrigger?!0:!1}function k(){_.selected.type="newGroup",_.selected.obj=null}function N(){e.newBuoyGroup(_.editName.value).then(function(n){_.selected.type="all",r()},function(e){n.error(e)})}function S(){_.commands.forEach(function(n){for(var e=0;e<_.buoyInstances.length;e++){var t=_.buoyInstances[e];if(n.buoyId==t.buoyId){n.buoyName=t.name,""==n.buoyName&&(n.buoyName="(no name)");break}}for(var e=0;e<_.commandTypes.length;e++)if(n.commandTypeId==_.commandTypes[e].id){n.commandName=_.commandTypes[e].name;break}})}function G(){if(-1!=_.command.id&&""!=_.command.value){_.newCommand=!1;var n=[];"instance"==_.selected.type?n.push(_.selected.obj.buoyId):"group"==_.selected.type?_.buoyInstances.forEach(function(e){e.buoyGroupId==_.selected.obj.id&&n.push(e.buoyId)}):"all"==_.selected.type&&_.buoyInstances.forEach(function(e){n.push(e.buoyId)}),$(n),C()}}function C(){_.command.id=-1,_.command.value=""}function E(){_.newCommand=!1,C()}function $(t){e.sendBuoyCommand(_.command,t).then(function(n){i()},function(e){n.error(e)})}function U(n){}function j(){if(-1!=_.trigger.sensorTypeId&&""!=_.trigger.value){_.newTrigger=!1;var n=[];"instance"==_.selected.type?n.push(_.selected.obj.id):"group"==_.selected.type?_.buoyInstances.forEach(function(e){e.buoyGroupId==_.selected.obj.id&&n.push(e.id)}):"all"==_.selected.type&&_.buoyInstances.forEach(function(e){n.push(e.id)}),A(n),F()}}function A(t){e.addWarningTriggers(_.trigger,t).then(function(n){s()},function(e){n.error(e)})}function F(){_.trigger={sensorTypeId:-1,operator:"<",value:"",message:""}}function P(){_.newTrigger=!1,F()}function D(n){return 0!=n.id?!0:!1}function M(n){return"all"==_.selected.type?!0:"instance"==_.selected.type?O(n):"group"==_.selected.type?R(n):!1}function O(n){return n.buoyId==_.selected.obj.buoyId?!0:!1}function R(n){for(var e=0;e<_.buoyInstances.length;e++){var t=_.buoyInstances[e];if(t.buoyGroupId==_.selected.obj.id&&n.buoyId==t.buoyId)return!0}return!1}var _=this;_.buoyGroups=[],_.buoyInstances=[],_.groupBuoys=[],_.commands=[],_.commandTypes=[],_.sensorTypes=[],_.warningTriggers=[],_.command={id:-1,value:""},_.selected={type:"none",obj:null},_.editName={},_.editName.on=!1,_.editGroup={},_.editGroup.on=!1,_.newCommand=!1,_.newTrigger=!1,_.operators=["<",">","="],_.trigger={},_.selectAll=m,_.selectBuoyGroup=f,_.selectBuoyInstance=v,_.startEditingName=y,_.finishEditingName=h,_.startEditingBuoyGroup=I,_.finishEditingBuoyGroup=x,_.selectNewBuoyGroup=k,_.saveNewBuoyGroup=N,_.buoyGroupFilter=D,_.commandFilter=M,_.sendCommand=G,_.deleteCommand=U,_.showBuoyConfig=l,_.addTrigger=j,_.cancelNewCommand=E,_.cancelNewTrigger=P,_.editing=B,_.cancelEditName=w,_.cancelEditGroup=T,t()}angular.module("app.config").controller("ConfigController",n),n.$inject=["$log","server"]}(),function(){"use strict";function n(n){n.configureStates(e())}function e(){return[{state:"config",config:{url:"/config",controller:"ConfigController",controllerAs:"vm",templateUrl:"/app/config/config.html",data:{access:"power_user"}}}]}angular.module("app.config").run(n),n.$inject=["routerHelper"]}(),function(){"use strict";function n(n){var t="/hello";n.configureStates(e(),t)}function e(){return[{state:"hello",config:{url:"/hello",controller:"HelloController",data:{access:"any"}}}]}angular.module("app.core").run(n),n.$inject=["routerHelper"]}(),function(){"use strict";function n(n,e){function t(){e.debug("howdy"),n.go("dashboard"),n.includes("hello")&&n.go("login")}t()}angular.module("app.core").controller("HelloController",n),n.$inject=["$state","$log"]}(),function(){"use strict";function n(n,e,t){function r(n){function r(n,r){n.forEach(function(n){e.state(n.state,n.config)}),r&&!i&&(i=!0,t.otherwise(r))}function o(){return n.get()}function a(e){return n.includes(e)}var i=!1;return{configureStates:r,getStates:o,stateActive:a}}this.$get=r,r.$inject=["$state"]}angular.module("app.core").provider("routerHelper",n),n.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function n(n,e,t,r,o){function a(){return{headers:{}}}function i(n){return n.headers.Authorization="Bearer "+r.getToken(),n}function s(n){return n.headers["Content-Type"]="application/json",n}function u(e,r){var o={email:e,password:r};return n.post(t+"/api/login",JSON.stringify(o))}function d(){r.logout()}function c(e){var o={email:r.currentUser(),password:e};return n.post(t+"/api/changepassword",JSON.stringify(o))}function l(e){var r={email:e};return n.post(t+"/api/forgotpassword",JSON.stringify(r))}function p(e,r){var o=i(a()),s="?start_time="+e+"&end_time="+r;return n.get(t+"/api/readings"+s,o)}function m(){var e=i(a());return n.get(t+"/api/buoy_groups",e)}function g(){var e=i(a());return n.get(t+"/api/buoy_instances?active=true",e)}function f(e,r){var o=s(i(a())),u={name:r};return n.put(t+"/api/buoy_groups/"+e,JSON.stringify(u),o)}function v(e,r,o){var u=s(i(a())),d={name:r,buoyGroupId:o};return n.put(t+"/api/buoy_instances/"+e,JSON.stringify(d),u)}function b(e){var r=s(i(a())),o={name:e};return n.post(t+"/api/buoy_groups",JSON.stringify(o),r)}function y(e,r,o){var u=s(i(a())),d={name:o,buoyId:e,buoyGroupId:r};return n.post(t+"/api/buoy_instances",JSON.stringify(d),u)}function h(){var e=i(a());return n.get(t+"/api/command_types",e)}function w(){var e=i(a());return n.get(t+"/api/commands?sent=false",e)}function I(r){var s=i(a());s.responseType="arraybuffer",s.headers.Accept="text/csv";var u=n.get(t+"/api/export?readings="+r.join(),s);return u.then(function(n){var e=o().format("DD-MM-YY-HHmmss"),t="export-"+e+".csv";x(t,n.data,"text/csv")},function(n){e.error(n)}),u}function x(n,e,t){var r=new Blob([e],{type:t});saveAs(r,n)}function T(e,r){var o=s(i(a())),u={commands:[]};return r.forEach(function(n){u.commands.push({commandTypeId:e.id,value:parseInt(e.value,10),buoyId:n})}),n.post(t+"/api/commands",JSON.stringify(u),o)}function B(n){}function k(){var e=i(a());return n.get(t+"/api/warning_triggers?active_instances=true",e)}function N(e,r){var o=s(i(a())),u={warningTriggers:[]};return r.forEach(function(n){u.warningTriggers.push({buoyInstanceId:n,sensorTypeId:e.sensorTypeId,operator:e.operator,value:parseInt(e.value,10),message:e.message})}),n.post(t+"/api/warning_triggers",JSON.stringify(u),o)}function S(){var e=i(a());return n.get(t+"/api/warnings",e)}function G(){var e=i(a());return n.get(t+"/api/sensor_types",e)}function C(){var e=i(a());return n.get(t+"/api/users",e)}function E(e){var r=s(i(a())),o={email:e.email,firstName:e.firstName,lastName:e.lastName,role:e.role};return n.post(t+"/api/users",JSON.stringify(o),r)}function $(e){var r=s(i(a())),o={firstName:e.firstName,lastName:e.lastName,role:e.role};return n.put(t+"/api/users/"+e.id,JSON.stringify(o),r)}function U(e){var r=i(a());return n["delete"](t+"/api/users/"+e,r)}function j(e,r){var o=s(i(a())),u={guid:r,name:e};return n.post(t+"/api/buoys",JSON.stringify(u),o)}return{login:u,logout:d,changePassword:c,forgotPassword:l,getReadings:p,getBuoyGroups:m,getBuoyInstances:g,updateBuoyGroupName:f,updateBuoyInstanceName:v,newBuoyGroup:b,updateBuoyInstanceGroup:y,getCommandTypes:h,getBuoyCommands:w,exportData:I,sendBuoyCommand:T,getWarningTriggers:k,addWarningTriggers:N,getWarnings:S,getSensorTypes:G,getUsers:C,addUser:E,updateUser:$,deleteUser:U,deleteBuoyCommand:B,addBuoy:j}}angular.module("app").factory("server",n),n.$inject=["$http","$log","SERVER_ADDRESS","auth","moment"]}(),function(){"use strict";function n(){function n(){return[{id:1,buoy:1,timestamp:1438933614,latitude:-27.44613423,longitude:153.07834625,readings:{battery:90,pressure:140,sealevel:21,turbidity:14}},{id:2,buoy:2,timestamp:1438588117,latitude:-27.42693772,longitude:153.20674896,readings:{battery:70,pressure:122,sealevel:44,turbidity:4}},{id:3,buoy:2,timestamp:1438760876,latitude:-27.491475,longitude:153.006655,readings:{battery:45,pressure:85,sealevel:15,turbidity:45}},{id:4,buoy:4,timestamp:1438847291,latitude:-27.400357,longitude:153.177995,readings:{battery:75,pressure:97,sealevel:33,turbidity:66}},{id:77,buoy:1,timestamp:1438328839,latitude:-27.44713423,longitude:153.09234625,readings:{battery:83,pressure:118,sealevel:24.5,turbidity:8}}]}function e(){return[{id:"battery",name:"Battery",description:"Battery level of buoy",colour:"",units:"%",lowerBound:0,upperBound:100,display:!0,unconfigured:!1},{id:"turbidity",name:"Turbidity",description:"Water quality around buoy",colour:"",units:"g/ml",lowerBound:0,upperBound:70,display:!0,unconfigured:!1},{id:"pressure",name:"",description:"",colour:"",units:"",lowerBound:-1,upperBound:-1,display:!1,unconfigured:!0}]}function t(){}function r(){}return{getReadings:n,getSensors:e,login:t,logout:r}}angular.module("mock.server",[]).factory("server",n)}(),function(){"use strict";function n(n,e,t,r,o){function a(){t.queryReadings().then(function(){r.updateReadings()}),t.querySensors().then(function(){f.sensors=t.sensors()}),i()}function i(){f.labels=["January","February","March","April","May","June","July"],f.series=["Series A","Series B"],f.data=[[65,59,80,81,56,55,40],[28,48,40,19,86,27,90]]}function s(n){n.collapsed=!n.collapsed}function u(n){n.buoyInstances.forEach(function(e){e.enabled=n.enabled}),c()}function d(n,e){var t=!0,r=!0;n.buoyInstances.forEach(function(n){n.enabled?r=!1:t=!1}),r?n.enabled=!1:n.enabled=!0,r||t?n.indeterminate=!1:n.indeterminate=!0,c()}function c(){t.updateBuoys(),r.updateReadings()}function l(){if(p()){var n=v+" "+b;"range"==f.times.type?(f.times.range.from=o(f.times.inputs.range.from.date+" "+f.times.inputs.range.from.time,n),f.times.range.to=o(f.times.inputs.range.to.date+" "+f.times.inputs.range.to.time,n)):"point"==f.times.type&&(f.times.point=o(f.times.inputs.point.date+" "+f.times.inputs.point.time,n)),t.updateTimes().then(function(){r.updateReadings()})}}function p(){if("since"==f.times.type&&f.times.inputs.since.value)return!0;if("range"==f.times.type){var n=f.times.inputs.range.from.date,e=f.times.inputs.range.from.time,t=f.times.inputs.range.to.date,r=f.times.inputs.range.to.time;if(n&&e&&t&&r)return!0;if(n&&!e&&t&&!r)return!0}return"point"==f.times.type&&f.times.inputs.point.date?!0:!1}function m(){t.updateSensors(),r.updateReadings()}function g(){t.exportData()}var f=this,v="D/M/YY",b="h:mm A";f.buoys=t.buoys(),f.times=t.times(),f.sensors=t.sensors(),f.updateBuoysFilter=c,f.updateTimesFilter=l,f.updateSensorsFilter=m,f.toggleBuoyGroup=s,f.selectBuoyGroup=u,f.selectBuoyInstance=d,f.exportData=g,a(),e.ready(function(){r.initialiseMap()})}angular.module("app.dashboard").controller("DashboardController",n),n.$inject=["$log","$document","dashboard","map","moment"]}(),function(){"use strict";function n(n){var t="/dashboard";n.configureStates(e(),t)}function e(){return[{state:"dashboard",config:{url:"/dashboard",controller:"DashboardController",controllerAs:"vm",templateUrl:"/app/dashboard/dashboard.html",data:{access:"authed"}}}]}angular.module("app.dashboard").run(n),n.$inject=["routerHelper"]}(),function(){"use strict";function n(n,e,t){function r(r,o){r||(r=t().subtract(R.inputs.since.value,R.inputs.since.quantifier).unix(),o=t().unix());var a=e.getReadings(r,o);return a.then(function(n){D=n.data.buoyGroups,i(),T()},function(e){n.error(e)}),a}function o(){var t=e.getSensorTypes();return t.then(function(n){w(n.data.sensorTypes),T()},function(e){n.error(e)}),t}function a(){R={type:"since",range:{from:null,to:null},point:null,pointReadings:[],inputs:{since:{value:2,quantifier:"weeks",options:["hours","days","weeks","months"]},range:{from:{date:"",time:""},to:{date:"",time:""}},point:{date:"",time:""}}}}function i(){if(D){for(var n=[],e=[],t=0;t<D.length;t++){var r=D[t];n.push(r.id);for(var o=s(r),a=0;a<r.buoyInstances.length;a++){var i=r.buoyInstances[a];e.push(i.id),u(i,o)}}l(n),p(e)}}function s(n){var e={},t=d(n.id);return-1!=t?e=O[t]:(e.id=n.id,e.name=n.name,e.enabled=!0,e.collapsed=!1,e.indeterminate=!1,e.buoyInstances=[],O.push(e)),e.name=n.name,e}function u(n,e){var t={},r=d(e.id),o=c(n.id,e.id);return-1!=o?t=O[r].buoyInstances[o]:(t.id=n.id,t.enabled=!0,e.buoyInstances.push(t)),t.name=n.name,t}function d(n){for(var e=0;e<O.length;e++)if(O[e].id==n)return e;return-1}function c(n,e){var t=d(e);if(-1==t)return-1;for(var r=0;r<O[t].buoyInstances.length;r++)if(O[t].buoyInstances[r].id==n)return r;return-1}function l(n){for(var e=[],t=0;t<O.length;t++){var r=O[t];-1==n.indexOf(r.id)&&e.push(t)}for(var t=0;t<e.length;t++)O.splice(e[t],1)}function p(n){for(var e=[],t=0;t<O.length;t++)for(var r=O[t],o=0;o<r.buoyInstances.length;o++){var a=r.buoyInstances[o];-1==n.indexOf(a.id)&&e.push({group:t,instance:o})}for(var t=0;t<e.length;t++)O[e[t].group].splice(e[t].instance,1)}function m(){return P}function g(){return O}function f(){return R}function v(){return M}function b(){T()}function y(){var n,e;"since"==R.type?(n=t().subtract(R.inputs.since.value,R.inputs.since.quantifier).unix(),e=t().unix()):"all"==R.type?(n=0,e=t().unix()):"range"==R.type?(n=R.range.from.unix(),e=R.range.to.unix()):"point"==R.type&&(n=R.point.clone().subtract(2,"weeks").unix(),e=R.point.clone().add(2,"weeks").unix());var o=r(n,e);return o.then(function(){"point"==R.type&&x(),T()}),o}function h(){T()}function w(n){for(var e=0;e<n.length;e++){var t=n[e];M.hasOwnProperty(t.id)||(t.inputs={enabled:!1,options:[">","<","="],selected:">",value:""},M[t.id]=t)}}function I(){for(var n=P,e=t.unix(n[0].timestamp),r=1;r<n.length;r++)t.unix(n[r].timestamp).isBefore(e)&&(e=t.unix(n[r].timestamp));return e}function x(){R.pointReadings=[],D&&D.forEach(function(n){n.buoyInstances.forEach(function(n){var e={id:n.readings[0].id,timestamp:n.readings[0].timestamp};n.readings.forEach(function(n){var r=t.unix(e.timestamp).diff(R.point),o=t.unix(n.timestamp).diff(R.point);Math.abs(o)<Math.abs(r)&&(e.id=n.id,e.timestamp=n.timestamp)}),R.pointReadings.push(e.id)})})}function T(){if(P=[],D)for(var n=0;n<D.length;n++){var e=D[n];if(B(e.id))for(var t=N(e),r=0;r<e.buoyInstances.length;r++){var o=e.buoyInstances[r];if(k(o.id,e.id))for(var a=S(o,t),i=0;i<o.readings.length;i++){var s=o.readings[i];G(s)&&a.readings.push(s)}}}}function B(n){return O[d(n)].enabled}function k(n,e){var t=d(e),r=c(n,e);return O[t].buoyInstances[r].enabled}function N(n){var e={};return P.push(e),e.id=n.id,e.name=n.name,e.buoyInstances=[],e}function S(n,e){var t={};return e.buoyInstances.push(t),t.id=n.id,t.name=n.name,t.readings=[],t}function G(n){return C(n)&&E(n)?!0:!1}function C(n){if("since"==R.type){var e=t().subtract(R.inputs.since.value,R.inputs.since.quantifier),r=t.unix(n.timestamp);if(!r.isAfter(e))return!1}else if("range"==R.type){var r=t.unix(n.timestamp);if(!r.isBetween(R.range.from,R.range.to))return!1}else if("point"==R.type&&-1==R.pointReadings.indexOf(n.id))return!1;return!0}function E(n){if(0===Object.keys(M).length)return!0;for(var e=0;e<n.sensorReadings.length;e++)if(!$(n.sensorReadings[e]))return!1;return!0}function $(n){var e=M[n.sensorTypeId].inputs;if(!e.enabled)return!0;var t=parseInt(e.value,10);if(">"==e.selected){if(n.value<=t)return!1}else if("<"==e.selected){if(n.value>=t)return!1}else if("="==e.selected&&n.value!=t)return!1;return!0}function U(n){var e=t.unix(n.timestamp);if("all"==R.type)var r=t(),o=r.clone().subtract(2,"weeks");else if("since"==R.type)var r=t(),o=t().subtract(R.inputs.since.value,R.inputs.since.quantifier);else if("range"==R.type)var r=R.range.to,o=R.range.from;else if("point"==R.type){if(null===R.point)return 1;var r=R.point,o=r.clone().subtract(2,"weeks")}return j(e,o,r)}function j(n,e,t){return n.isBefore(e)?0:n.isBefore(t)?n.diff(e)/t.diff(e):1}function A(){var n=[];P.forEach(function(e){e.buoyInstances.forEach(function(e){e.readings.forEach(function(e){n.push(e.id)})})}),e.exportData(n)}function F(n,e){var r=t.unix(n.timestamp).format("D MMMM h:mm A"),o="<div><h5 style='color: white'>"+e.name+"</h5>"+r+"<br>---";return n.sensorReadings.forEach(function(n){o+="<br>"+M[n.sensorTypeId].name+": "+n.value+" "+M[n.sensorTypeId].unit}),o+="</div>"}var P=[],D=[],M={},O=[],R={};return a(),{queryReadings:r,querySensors:o,readings:m,buoys:g,times:f,sensors:v,updateBuoys:b,updateTimes:y,updateFilters:T,updateSensors:h,getOldestReading:I,getRelativeAge:U,exportData:A,popupContent:F}}angular.module("app.dashboard").factory("dashboard",n),n.$inject=["$log","server","moment"]}(),function(){"use strict";function n(n,e,t){function r(){var n=[{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#444444"}]},{featureType:"landscape",elementType:"all",stylers:[{color:"#f2f2f2"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"road",elementType:"all",stylers:[{saturation:-100},{lightness:45}]},{featureType:"road.highway",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"all",stylers:[{color:"#0B5B91"},{visibility:"on"}]}];b.styles=n,f=new t.maps.Map(document.getElementById("map-canvas"),b),t.maps.event.addListener(f,"zoom_changed",function(){b.zoom=f.getZoom()}),t.maps.event.addListener(f,"center_changed",function(){b.center=f.getCenter()}),t.maps.event.addListener(f,"maptypeid_changed",function(){b.mapTypeId=f.getMapTypeId()}),t.maps.event.addListener(f,"click",function(){w&&m()}),y={},h=[]}function o(){var n=e.readings(),t=[],r=0;n.forEach(function(n){n.buoyInstances.forEach(function(n){n.readings.forEach(function(e){t.push(e.id),a(e,n,p(r))}),r++})}),s(t)}function a(n,e,t){var r=n.id;y.hasOwnProperty(r)?-1!=h.indexOf(r)&&d(r):i(n,e),y[r].setIcon(l(t)),y[r].setOpacity(c(n))}function i(n,e){var r=new t.maps.Marker({position:new t.maps.LatLng(n.latitude,n.longitude),map:f});t.maps.event.addListener(r,"click",function(){g(n,e,r)}),y[n.id]=r}function s(n){for(var e in y)y.hasOwnProperty(e)&&(e=parseInt(e,10),-1==n.indexOf(e)&&u(e))}function u(n){y[n].setMap(null),h.push(n),w&&-1!=h.indexOf(I)&&m()}function d(n){y[n].setMap(f),h.splice(h.indexOf(n),1)}function c(n){var t=e.getRelativeAge(n),r=.3;return t*(1-r)+r}function l(n){return new t.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|"+n.substr(1),new t.maps.Size(21,34),new t.maps.Point(0,0),new t.maps.Point(10,34))}function p(n){var e=["#84CBD1","#CC4B30","#BF54D0","#70D84C","#36362B","#CD4075","#553264","#CBCC92","#D2983C","#6B7AD0","#C78378","#5A8A37","#CCD446","#72DA9E","#598369","#6D292F","#CAB3CC","#785F2A","#596C87","#C471B4"];return e[n%e.length]}function m(){v.close(),w=!1}function g(n,r,o){if(!w||(m(),n.id!=I)){var a=e.popupContent(n,r);v=new InfoBox({content:a,pixelOffset:new t.maps.Size(-60,0),zIndex:null,boxStyle:{color:"white","background-color":"rgb(40, 40, 40)",width:"150px",padding:"10px","border-radius":"10px"},closeBoxMargin:"-6px -6px 2px 2px"}),v.open(f,o),w=!0,I=n.id}}var f,v,b={zoom:11,center:new t.maps.LatLng(-27.573704,153.055818),mapTypeId:t.maps.MapTypeId.ROADMAP},y={},h=[],w=!1,I=-1;return{initialiseMap:r,updateReadings:o}}angular.module("app.dashboard").factory("map",n),n.$inject=["$log","dashboard","google"]}(),function(){"use strict";angular.module("app.gui").config(["$datepickerProvider","$timepickerProvider","$httpProvider",function(n,e,t){t.interceptors.push("authInterceptor"),angular.extend(n.defaults,{autoclose:!0,dateFormat:"d/M/yy",modelDateFormat:"d/M/yy",dateType:"string",startWeek:1}),angular.extend(e.defaults,{autoclose:!1,timeFormat:"h:mm a",modelTimeFormat:"h:mm a",timeType:"string"})}])}(),function(){"use strict";function n(n,e,t,r){function o(){n.$on("$stateChangeSuccess",function(){d=r.loggedIn()})}function a(n){return t.stateActive(n)}function i(n){switch(n){case"dashboard":return d;case"config":return r.checkUser("power_user");case"warnings":return d;case"admin":return r.checkUser("system_admin");case"logout":return d;default:return!1}}function s(){r.logout(),d=!1,e.go("login")}var u=this,d=r.loggedIn();u.checkShowNav=i,u.stateActive=a,u.logout=s,o()}angular.module("app.nav").controller("NavController",n),n.$inject=["$rootScope","$state","routerHelper","auth"]}(),function(){"use strict";function n(n,e,t){function r(){o()}function o(){e.getWarnings().then(function(n){u.warnings=n.data.warnings,a()},function(e){n.error(e)})}function a(){e.getBuoyInstances().then(function(n){u.buoyInstances=n.data.buoyInstances,i()},function(e){n.error(e)})}function i(){e.getSensorTypes().then(function(n){u.sensorTypes=n.data.sensorTypes,s()},function(e){n.error(e)})}function s(){u.warnings.forEach(function(n){n.readingTime=t(n.readingTimestamp,"X").format("DD/MM/YY HH:mm A");for(var e=0;e<u.buoyInstances.length;e++){var r=u.buoyInstances[e];if(r.id==n.warningTrigger.buoyInstanceId){n.buoyName=r.name;break}}for(var e=0;e<u.sensorTypes.length;e++){var o=u.sensorTypes[e];if(o.id==n.warningTrigger.sensorTypeId){n.sensorName=o.name;break}}})}var u=this;u.warnings=[],u.buoyInstances=[],u.sensorTypes=[],r()}angular.module("app.warnings").controller("WarningsController",n),n.$inject=["$log","server","moment"]}(),function(){"use strict";function n(n){n.configureStates(e())}function e(){return[{state:"warnings",config:{url:"/warnings",controller:"WarningsController",controllerAs:"vm",templateUrl:"/app/warnings/warnings.html",data:{access:"authed"}}}]}angular.module("app.warnings").run(n),n.$inject=["routerHelper"]}(),angular.module("app.templates",[]).run(["$templateCache",function(n){n.put("admin/admin.html",'<div class="grid-content">\r\n	<div>\r\n		<h3>Users</h3>\r\n		<table>\r\n			<thead>\r\n				<tr>\r\n					<th>Email</th>\r\n					<th>First Name</th>\r\n					<th>Last Name</th>\r\n					<th>Role</th>\r\n					<th>Last Login</th>\r\n					<th></th>\r\n				</tr>\r\n			</thead>\r\n			<tbody>\r\n				<tr ng-repeat="user in vm.users">\r\n					<td>\r\n						<span ng-if="user.id != -2">{{ user.email }}</span>\r\n						<input ng-if="user.id == -2" type="text" ng-model="vm.editUser.email" placeholder="johndoe@aol.com">\r\n					</td>\r\n					<td>\r\n						<span ng-if="vm.editUserId != user.id">{{ user.firstName }}</span>\r\n						<input ng-if="vm.editUserId == user.id" type="text" ng-model="vm.editUser.firstName" placeholder="John">\r\n					</td>\r\n					<td>\r\n						<span ng-if="vm.editUserId != user.id">{{ user.lastName }}</span>\r\n						<input ng-if="vm.editUserId == user.id" type="text" ng-model="vm.editUser.lastName" placeholder="Doe">\r\n					</td>\r\n					<td>\r\n						<span ng-if="vm.editUserId != user.id">{{ user.role }}</span>\r\n						<select ng-if="vm.editUserId == user.id"\r\n							type="button" class="btn btn-default" \r\n							ng-model="vm.editUser.role" \r\n							bs-options="opt for opt in vm.roles"\r\n							bs-select>\r\n						</select>\r\n					</td>\r\n					<td>\r\n						{{ user.lastLogin.text }}\r\n					</td>\r\n					<td>\r\n						<button class="small button" ng-if="vm.editUserId == -1" ng-click="vm.startEditingUser(user)">Edit</button>\r\n						<button class="small button" ng-if="vm.editUserId == user.id" ng-click="vm.finishEditingUser()">Save</button>\r\n						<button class="small info button" ng-if="vm.editUserId == user.id" ng-click="vm.cancelEditingUser()">Cancel</button>\r\n						<button class="small alert button" ng-if="vm.showDeleteButton(user)" ng-click="vm.deleteUser(user)">Delete</button>\r\n					</td>\r\n				</tr>\r\n			</tbody>\r\n		</table>\r\n		<button class="small button" ng-if="vm.editUserId == -1" ng-click="vm.startAddingUser()">Add User</button>\r\n	</div>\r\n	<div>\r\n		<h3>Add Buoy</h3>\r\n		<label>Name</label>\r\n		<input type="text" ng-model="vm.newBuoyName">\r\n		<button class="button" ng-click="vm.addBuoy()">Add</button>\r\n	</div>\r\n	<!--<div>\r\n		<h3>Configure Sensors</h3>\r\n		<table>\r\n			<thead>\r\n				<tr>\r\n					<th>ID</th>\r\n					<th>Name</th>\r\n					<th>Description</th>\r\n					<th>Colour</th>\r\n					<th>Units</th>\r\n					<th>Lower Bound</th>\r\n					<th>Upper Bound</th>\r\n					<th>Display</th>\r\n					<th></th>\r\n				</tr>\r\n			</thead>\r\n			<tbody>\r\n				<tr ng-repeat="sensor in vm.sensors" \r\n						ng-class="{ unconfiguredSensor: sensor.unconfigured,\r\n									invalidSensor: !vm.sensorValid(sensor) }">\r\n					<td>\r\n						{{ sensor.id }}\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.name }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.name">\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.description }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.description">\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.colour }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.colour">\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.units }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.units">\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.lowerBound }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.lowerBound">\r\n					</td>\r\n					<td>\r\n						<span ng-show="!vm.sensorsEdit[$index]">{{ sensor.upperBound }}</span>\r\n						<input ng-show="vm.sensorsEdit[$index]" type="text" ng-model="sensor.upperBound">\r\n					</td>\r\n					<td>\r\n						<input type="checkbox" ng-model="sensor.display">\r\n					</td>\r\n					<td>\r\n						<button ng-click="vm.toggleEdit($index)">\r\n							{{ vm.sensorsEdit[$index] ? \'Save\' : \'Edit\' }}\r\n						</button>\r\n					</td>\r\n				</tr>\r\n			</tbody>\r\n		</table>\r\n	</div>-->\r\n</div>'),
n.put("auth/changepassword.html",'<div class="align-center grid-block">\r\n	<div class="medium-4 grid-content">\r\n		<br><h3>Change Password</h3><br>\r\n		<p ng-show="authVm.firstLogin">Please change your password.</p>\r\n		<form ng-submit="authVm.changePassword()">\r\n			<label for="newPassword">New Password</label>\r\n			<input type="password" ng-model="authVm.newPassword" name="newPassword">\r\n			<label for="confirmPassword">Confirm New Password</label>\r\n			<input type="password" ng-model="authVm.confirmPassword" name="confirmPassword">\r\n			<input type="submit" class="button" value="Update">\r\n		</form>\r\n	</div>\r\n</div>'),n.put("auth/forgotpassword.html",'<div class="align-center grid-block">\r\n	<div class="medium-4 grid-content">\r\n		<br><h3>Forgot Password</h3><br>\r\n		<form ng-submit="authVm.forgotPassword()">\r\n			<label for="email">Email</label>\r\n			<input type="text" ng-model="authVm.email" name="email">\r\n			<input type="submit" class="button" value="Submit">\r\n		</form>\r\n		<a ui-sref="login">Back to login</a>\r\n	</div>\r\n</div>'),n.put("auth/login.html",'<div class="align-center grid-block">\r\n	<div class="medium-4 grid-content">\r\n		<br><h3>Login</h3><br>\r\n		<form ng-submit="authVm.login()">\r\n			<label for="email">Email</label>\r\n			<input type="text" ng-model="authVm.email" name="email">\r\n			<label for="password">Password</label>\r\n			<input type="password" ng-model="authVm.password" name="password">\r\n			<input type="submit" class="button" value="Login">\r\n		</form>\r\n		<!--<a ui-sref="forgotpassword">Forgotten your password?</a>-->\r\n	</div>\r\n</div>'),n.put("config/config.html",'<div class="medium-3 grid-block vertical shadow-glow">\r\n	<div class="grid-content shadow-bottom shrink">\r\n		<h3>Select Buoys</h3>\r\n		<ul>\r\n			<li class="expand info button listButton"\r\n				ng-click="vm.selectAll()">\r\n				All Buoys\r\n			</li>\r\n		</ul>\r\n	</div>\r\n	<div class="grid-content shadow-bottom">\r\n		<h4>Buoy Groups</h4>\r\n		<ul>\r\n			<li class="expand button listButton"\r\n				ng-click="vm.selectNewBuoyGroup()">\r\n				New Buoy Group\r\n			</li>\r\n			<li class="expand info button listButton"\r\n				ng-repeat="buoyGroup in vm.buoyGroups | filter:vm.buoyGroupFilter"\r\n				ng-click="vm.selectBuoyGroup(buoyGroup)">\r\n					{{ buoyGroup.name }}\r\n			</li>\r\n		</ul>\r\n	</div>\r\n	<div class="grid-content shadow-bottom">\r\n		<h4>Buoy Instances</h4>\r\n		<ul>\r\n			<li class="expand info button listButton"\r\n				ng-repeat="buoyInstance in vm.buoyInstances"\r\n				ng-click="vm.selectBuoyInstance(buoyInstance)">\r\n					<span ng-if="buoyInstance.name != \'\'">{{ buoyInstance.name }}</span>\r\n					<span ng-if="buoyInstance.name == \'\'" class="red">(no name)</span>\r\n					({{ buoyInstance.buoyGroupName }})\r\n			</li>\r\n		</ul>\r\n	</div>\r\n</div>\r\n<div class="medium-9 grid-content">\r\n	<div ng-if="vm.selected.type == \'newGroup\'">\r\n		<label>Name</label>\r\n		<form>\r\n			<input type="text" ng-model="vm.editName.value">\r\n			<input type="submit" ng-click="vm.saveNewBuoyGroup()" \r\n				value="Save" class="small button">\r\n		</form>\r\n	</div>\r\n	<div ng-if="vm.selected.type == \'group\'">\r\n		<h3>{{ vm.selected.obj.name }}</h3>\r\n			<button ng-if="!vm.editing()"\r\n				class="small button" ng-click="vm.startEditingName()">Edit name\r\n			</button>\r\n		<form ng-if="vm.editName.on">\r\n			<input type="text" ng-model="vm.selected.obj.name">\r\n			<input type="submit" ng-click="vm.finishEditingName()"\r\n				value="Save" class="small button">\r\n			<button class="info button" ng-click="vm.cancelEditName()">Cancel</button>\r\n		</form>\r\n	</div>\r\n	<div ng-if="vm.selected.type == \'instance\'">\r\n		<h3 ng-if="vm.selected.obj.name != \'\'">{{ vm.selected.obj.name }}</h3>\r\n		<h3 ng-if="vm.selected.obj.name == \'\'" class="red">(no name)</h3>\r\n		<button ng-if="!vm.editing()"\r\n			class="small button" ng-click="vm.startEditingName()">Edit name\r\n		</button>\r\n		<form ng-if="vm.editName.on">\r\n			<input type="text" ng-model="vm.selected.obj.name">\r\n			<input type="submit" ng-click="vm.finishEditingName()"\r\n				value="Save" class="small button">\r\n			<button class="info button" ng-click="vm.cancelEditName()">Cancel</button>\r\n		</form>\r\n		<div ng-if="!vm.editGroup.on">\r\n			<span>{{ vm.selected.obj.buoyGroupName }} \r\n				<button class="small button" ng-click="vm.startEditingBuoyGroup()"\r\n					ng-if="!vm.editing()">Change group</button>\r\n			</span>\r\n		</div>\r\n		<form ng-if="vm.editGroup.on">\r\n			<label>New name</label>\r\n			<input type="text" ng-model="vm.editGroup.name">\r\n			<label>New group</label>\r\n			<select type="button" class="btn btn-default" \r\n					ng-model="vm.editGroup.buoyGroupId" \r\n					bs-options="opt.id as opt.name for opt in vm.buoyGroups"\r\n					bs-select>\r\n			</select>\r\n			<br>\r\n			<input type="submit" ng-click="vm.finishEditingBuoyGroup()"\r\n				value="Save" class="small button">\r\n			<button class="info button" ng-click="vm.cancelEditGroup()">Cancel</button>\r\n		</form>\r\n	</div>\r\n	<div ng-if="vm.selected.type == \'group\'">\r\n		<h3>Buoys</h3>\r\n		<span ng-if="vm.groupBuoys.length == 0">(none)</span>\r\n		<ul ng-if="vm.groupBuoys.length > 0">\r\n			<li ng-repeat="buoyInstance in vm.groupBuoys">\r\n				{{ buoyInstance.name }}\r\n				<span ng-if="buoyInstance.name == \'\'">(no name)</span>\r\n			</li>\r\n		</ul>\r\n	</div>\r\n	<div ng-if="vm.showBuoyConfig()">\r\n		<div>\r\n			<h3>Commands</h3>\r\n			<table>\r\n				<thead>\r\n					<tr>\r\n						<th>Buoy</th>\r\n						<th>Command</th>\r\n						<th>Value</th>\r\n						<th></th>\r\n					</tr>\r\n				</thead>\r\n				<tbody>\r\n					<tr ng-repeat="command in vm.commands | filter:vm.commandFilter">\r\n						<td>{{ command.buoyName }}</td>\r\n						<td>{{ command.commandName }}</td>\r\n						<td>{{ command.value }}</td>\r\n						<td>\r\n							<!--<button class="small alert button"\r\n								ng-click="vm.deleteCommand(command)">\r\n								Delete\r\n							</button>-->\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			<button class="button small"\r\n					ng-click="vm.newCommand = true"\r\n					ng-if="!vm.editing()">New Command</button>\r\n			<form ng-if="vm.newCommand == true">\r\n				<h4>New Command</h4>\r\n				<select type="button" class="btn btn-default" \r\n						ng-model="vm.command.id" \r\n						bs-options="opt.id as opt.name for opt in vm.commandTypes"\r\n						placeholder="Command type"\r\n						bs-select>\r\n				</select>\r\n				<label>Value</label>\r\n				<input type="text" ng-model="vm.command.value" style="width: 20%">\r\n				<input type="submit" ng-click="vm.sendCommand()"\r\n					class="button" value="Send">\r\n				<button class="info button" ng-click="vm.cancelNewCommand()">Cancel</button>\r\n			</form>\r\n		</div>\r\n		<div>\r\n			<h3>Warning Triggers</h3>\r\n			<table>\r\n				<thead>\r\n					<tr>\r\n						<th>Buoy</th>\r\n						<th>Sensor</th>\r\n						<th>Operator</th>\r\n						<th>Value</th>\r\n						<th>Message</th>\r\n					</tr>\r\n				</thead>\r\n				<tbody>\r\n					<tr ng-repeat="trigger in vm.warningTriggers | filter:vm.triggerFilter">\r\n						<td>{{ trigger.buoyName }}</td>\r\n						<td>{{ trigger.sensorName }}</td>\r\n						<td>{{ trigger.operator }}</td>\r\n						<td>{{ trigger.value }}</td>\r\n						<td>{{ trigger.message }}</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			<button class="button small"\r\n					ng-click="vm.newTrigger = true"\r\n					ng-if="!vm.editing()">New Warning Trigger\r\n			</button>\r\n			<form ng-if="vm.newTrigger == true">\r\n				<h4>New Warning Trigger</h4>\r\n				<select type="button" class="btn btn-default" \r\n						ng-model="vm.trigger.sensorTypeId" \r\n						bs-options="opt.id as opt.name for opt in vm.sensorTypes"\r\n						placeholder="Sensor type"\r\n						bs-select>\r\n				</select>\r\n				<select type="button" class="btn btn-default" \r\n						ng-model="vm.trigger.operator" \r\n						bs-options="opt for opt in vm.operators"\r\n						bs-select>\r\n				</select>\r\n				<label>Value</label>\r\n				<input type="text" ng-model="vm.trigger.value" style="width: 20%">\r\n				<label>Message</label>\r\n				<input type="text" ng-model="vm.trigger.message">\r\n				<input type="submit" ng-click="vm.addTrigger()"\r\n					class="button" value="Add">\r\n				<button class="info button" ng-click="vm.cancelNewTrigger()">Cancel</button>\r\n			</form>\r\n		</div>\r\n	</div>\r\n</div>'),n.put("dashboard/dashboard.html",'<div class="grid-block wrap">\r\n	<div class="small-12 medium-4 large-3 grid-content">\r\n		<div class="filterPane">\r\n			<h3>Times</h3>\r\n			\r\n			<div class="btn-group" ng-model="vm.times.type" bs-radio-group>\r\n				<label class="btn btn-default"><input type="radio" class="btn btn-default" value="since" ng-change="vm.updateTimesFilter()">Since</label>\r\n				<label class="btn btn-default"><input type="radio" class="btn btn-default" value="range" ng-change="vm.updateTimesFilter()">Range</label>\r\n				<label class="btn btn-default"><input type="radio" class="btn btn-default" value="point" ng-change="vm.updateTimesFilter()">Point</label>\r\n			</div>\r\n			<div class="timefilters">\r\n				<div ng-show="vm.times.type==\'since\'" id="since">\r\n					<label><i class="fa fa-calendar"></i>Since</label>\r\n					<input type="text" ng-model="vm.times.inputs.since.value" ng-change="vm.updateTimesFilter()" name="value">\r\n					\r\n					<button type="button" class="btn btn-default" \r\n								ng-model="vm.times.inputs.since.quantifier" \r\n								bs-options="opt for opt in vm.times.inputs.since.options"\r\n								ng-change="vm.updateSensorsFilter()" bs-select>\r\n					</button>\r\n				</div>\r\n				\r\n				\r\n				<div ng-show="vm.times.type == \'range\'">\r\n					<!--<div class="form-group" ng-class="{\'has-error\': datepickerForm.date.$invalid}">-->\r\n					<div>\r\n					    <label><i class="fa fa-calendar"></i>From</label>\r\n					    <input type="text" ng-model="vm.times.inputs.range.from.date" ng-change="vm.updateTimesFilter()" name="date" placeholder="dd/mm/yy" bs-datepicker>\r\n				  	<!--</div>-->\r\n					  \r\n					 <!--<div class="form-group" ng-class="{\'has-error\': timepickerForm.time.$invalid}">-->\r\n					    <!--<label><i class="fa fa-clock-o"></i> To </label>-->\r\n					    <input type="text" size="8" ng-model="vm.times.inputs.range.from.time" ng-change="vm.updateTimesFilter()" name="time" placeholder="hh:mm" bs-timepicker>\r\n					  <!--</div>-->\r\n					</div>	  \r\n					  \r\n					<div>		  \r\n					 <!--<div class="form-group" ng-class="{\'has-error\': datepickerForm.date.$invalid}">-->\r\n					    <label><i class="fa fa-calendar"></i>To</label>\r\n					    <input type="text" ng-model="vm.times.inputs.range.to.date" ng-change="vm.updateTimesFilter()" name="date" placeholder="dd/mm/yy" bs-datepicker>\r\n				  	<!--</div>-->\r\n					  \r\n					 <!--<div class="form-group" ng-class="{\'has-error\': timepickerForm.time.$invalid}">-->\r\n					    <!--<label><i class="fa fa-clock-o"></i> To </label>-->\r\n					    <input type="text" size="8" ng-model="vm.times.inputs.range.to.time" ng-change="vm.updateTimesFilter()" name="time" placeholder="hh:mm" bs-timepicker>\r\n					  <!--</div>-->\r\n					</div>\r\n				</div>\r\n				<div ng-show="vm.times.type == \'point\'">\r\n					<div>\r\n					    <label><i class="fa fa-calendar"></i>From</label>\r\n					    <input type="text" ng-model="vm.times.inputs.point.date" ng-change="vm.updateTimesFilter()" name="date" placeholder="dd/mm/yy" bs-datepicker>\r\n				  	<!--</div>-->\r\n					  \r\n					 <!--<div class="form-group" ng-class="{\'has-error\': timepickerForm.time.$invalid}">-->\r\n					    <!--<label><i class="fa fa-clock-o"></i> To </label>-->\r\n					    <input type="text" size="8" ng-model="vm.times.inputs.point.time" ng-change="vm.updateTimesFilter()" name="time" placeholder="hh:mm" bs-timepicker>\r\n					  <!--</div>-->\r\n					</div>	  \r\n				</div>\r\n			</div>\r\n		</div>\r\n		<div class="filterPane">\r\n			<h3>Buoys</h3>\r\n\r\n			<div ng-repeat="buoyGroup in vm.buoys" class="buoyGroup">\r\n				<a class="btn btn-xs" ng-if="buoyGroup.buoyInstances && buoyGroup.buoyInstances.length > 0" ng-click="vm.toggleBuoyGroup(buoyGroup)"><span\r\n						class="glyphicon"\r\n						ng-class="{\r\n						\'glyphicon-chevron-right\': buoyGroup.collapsed,\r\n						\'glyphicon-chevron-down\': !buoyGroup.collapsed\r\n						}"></span></a>\r\n				<input type="checkbox" ng-model="buoyGroup.enabled" ui-indeterminate="buoyGroup.indeterminate" ng-change="vm.selectBuoyGroup(buoyGroup)">\r\n				{{ buoyGroup.name }}\r\n				<div ng-if="!buoyGroup.collapsed" ng-repeat="buoyInstance in buoyGroup.buoyInstances" class="buoyInstance">\r\n					<input type="checkbox" ng-model="buoyInstance.enabled" ng-change="vm.selectBuoyInstance(buoyGroup)">\r\n					{{ buoyInstance.name }}\r\n				</div>\r\n			</div>\r\n		</div>\r\n		<div class="filterPane">\r\n			<h3>Filters</h3>\r\n			<div class="sensorfilters">\r\n				<div ng-repeat="sensor in vm.sensors">\r\n					<div class="sensor-name">\r\n						<input type="checkbox" ng-model="sensor.inputs.enabled" ng-change="vm.updateSensorsFilter()">\r\n						{{ sensor.name }}\r\n					</div>\r\n					<div>\r\n						<button type="button" class="btn btn-default" \r\n								ng-model="sensor.inputs.selected" \r\n								bs-options="opt for opt in sensor.inputs.options"\r\n								ng-change="vm.updateSensorsFilter()" bs-select>\r\n						</button>\r\n						<input type="text" ng-model="sensor.inputs.value" ng-change="vm.updateSensorsFilter()"> {{ sensor.units }}\r\n					</div>\r\n					<br>\r\n				</div>\r\n			</div>\r\n		</div>\r\n	</div>\r\n	<div class="small-12 medium-8 large-5 grid-content no-overflow shadow-glow">\r\n		<div id="map-canvas"></div>\r\n		<div id="infoBox"></div>\r\n		<!--<div id="map-popover"></div>-->\r\n	</div>\r\n\r\n	<div class="small-12 medium-12 large-4 grid-content">\r\n		<button class="large button" style="margin: 10px"\r\n			ng-click="vm.exportData()">\r\n			Export Data\r\n		</button>\r\n		\r\n		<canvas id="sensorChart" class="chart chart-line" chart-data="vm.data"\r\n			chart-labels="vm.labels" chart-series="vm.series" chart-legend="true" >\r\n		</canvas>\r\n	</div>\r\n</div>'),n.put("dashboard/np-infobox.html","<div>\r\n	<h5>Buoy {{ vm.selectedMarker.buoy }}</h5>\r\n	{{ vm.selectedMarker.timestamp }}\r\n	<br>---<br>\r\n	Battery: {{ vm.selectedMarker.readings[1] }}\r\n	<br>Turbidity: {{ vm.selectedMarker.readings[2] }}\r\n	<br>Temperature: {{ vm.selectedMarker.readings[3] }}\r\n</div>"),n.put("nav/nav.partial.html",'<div ng-controller="NavController as vm"\r\n	 class="grid-content shrink" style="padding: 0;">\r\n	<header>\r\n		<h1 class=\'title\'>FMS</h1>\r\n		<div class="menu">\r\n			<ul ng-show="vm.checkShowNav(\'dashboard\')" ng-cloak\r\n				ng-class="{ active: vm.stateActive(\'dashboard\') }">\r\n				<a ui-sref="dashboard">Dashboard</a>\r\n			</ul>\r\n			<ul ng-show="vm.checkShowNav(\'config\')" ng-cloak\r\n				ng-class="{ active: vm.stateActive(\'config\') }">\r\n				<a ui-sref="config">Config</a>\r\n			</ul>\r\n			<ul ng-show="vm.checkShowNav(\'warnings\')" ng-cloak\r\n				ng-class="{ active: vm.stateActive(\'warnings\') }">\r\n				<a ui-sref="warnings">Warnings</a>\r\n			</ul>\r\n			<ul ng-show="vm.checkShowNav(\'admin\')" ng-cloak\r\n				ng-class="{ active: vm.stateActive(\'admin\') }">\r\n				<a ui-sref="admin">Admin</a>\r\n			</ul>\r\n			<!--<ul ng-hide="vm.checkShowNav(\'\')" ng-cloak\r\n				class="login"\r\n				ng-class="{ active: vm.stateActive(\'login\') }">\r\n				<a ui-sref="login">Login</a>\r\n			</ul>-->\r\n			<ul ng-show="vm.checkShowNav(\'logout\')" ng-cloak\r\n				class="login">\r\n				<a href="" ng-click="vm.logout()">Logout</a>\r\n			</ul>\r\n		</div>\r\n		<!-- <img id="dugong" src="/assets/img/dugong.gif" alt="dugong"> -->\r\n	</header>\r\n</div>'),n.put("warnings/warnings.html",'<div class="grid-content">\r\n	<h3>Warnings</h3>\r\n	<table>\r\n		<thead>\r\n			<tr>\r\n				<th>Buoy</th>\r\n				<th>Sensor</th>\r\n				<th>Operator</th>\r\n				<th>Warn Value</th>\r\n				<th>Message</th>\r\n				<th>Current Value</th>\r\n				<th>First Spotted</th>\r\n			</tr>\r\n		</thead>\r\n		<tbody>\r\n			<tr ng-repeat="warning in vm.warnings">\r\n				<td>{{ warning.buoyName }}</td>\r\n				<td>{{ warning.sensorName }}</td>\r\n				<td>{{ warning.warningTrigger.operator }}</td>\r\n				<td>{{ warning.warningTrigger.value }}</td>\r\n				<td>{{ warning.warningTrigger.message }}</td>\r\n				<td>{{ warning.readingValue }}</td>				\r\n				<td>{{ warning.readingTime }}</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>	\r\n</div>')}]);
//# sourceMappingURL=data:application/json;base64,